package lila.user

import lila.core.user.{ Flag, FlagCode, FlagName, FlagApi }

object Flags extends FlagApi:

  private inline def F(code: String, name: FlagName)                    = new Flag(FlagCode(code), name, none)
  private inline def F(code: String, name: FlagName, shortName: String) =
    new Flag(FlagCode(code), name, shortName.some)

  val all: List[Flag] = List(
    F("AD", "Andorra"),
    F("AE", "United Arab Emirates", "UAE"),
    F("AF", "Afghanistan"),
    F("AG", "Antigua and Barbuda"),
    F("AI", "Anguilla"),
    F("AL", "Albania"),
    F("AM", "Armenia"),
    F("AM-RA", "Artsakh"),
    F("AN", "Netherlands Antilles"),
    F("AO", "Angola"),
    F("AQ", "Antarctica"),
    F("AR", "Argentina"),
    F("AS", "American Samoa"),
    F("AT", "Austria"),
    F("AU", "Australia"),
    F("AW", "Aruba"),
    F("AX", "Aland Islands"),
    F("AZ", "Azerbaijan"),
    F("BA", "Bosnia-Herzegovina"),
    F("BB", "Barbados"),
    F("BD", "Bangladesh"),
    F("BE", "Belgium"),
    F("BF", "Burkina Faso"),
    F("BG", "Bulgaria"),
    F("BH", "Bahrain"),
    F("BI", "Burundi"),
    F("BJ", "Benin"),
    F("BL", "Saint Barthelemy"),
    F("BM", "Bermuda"),
    F("BN", "Brunei"),
    F("BO", "Bolivia"),
    F("BQ", "Bonaire, Sint Eustatius and Saba"),
    F("BR", "Brazil"),
    F("BS", "Bahamas"),
    F("BT", "Bhutan"),
    F("BV", "Bouvet Island"),
    F("BW", "Botswana"),
    F("BY", "Belarus"),
    F("BZ", "Belize"),
    F("CA", "Canada"),
    F("CA-QC", "Quebec"),
    F("CC", "Cocos (Keeling) Islands"),
    F("CD", "Congo (Democratic Rep.)"),
    F("CF", "Central African Republic"),
    F("CG", "Congo (Brazzaville)"),
    F("CH", "Switzerland"),
    F("CI", "Cote d'Ivoire"),
    F("CK", "Cook Islands"),
    F("CL", "Chile"),
    F("CM", "Cameroon"),
    F("CN", "China"),
    F("CO", "Colombia"),
    F("CR", "Costa Rica"),
    F("CU", "Cuba"),
    F("CV", "Cape Verde"),
    F("CW", "CuraÃ§ao"),
    F("CX", "Christmas Island"),
    F("CY", "Cyprus"),
    F("CZ", "Czechia"),
    F("DE", "Germany"),
    F("DJ", "Djibouti"),
    F("DK", "Denmark"),
    F("DM", "Dominica"),
    F("DO", "Dominican Republic"),
    F("DZ", "Algeria"),
    F("EC", "Ecuador"),
    F("EE", "Estonia"),
    F("EG", "Egypt"),
    F("EH", "Western Sahara"),
    F("ER", "Eritrea"),
    F("ES", "Spain"),
    F("ES-AN", "Andalusia"),
    F("ES-AR", "Aragon"),
    F("ES-AS", "Asturias"),
    F("ES-CT", "Catalonia"),
    F("ES-EU", "Basque Country"),
    F("ES-GA", "Galicia"),
    F("ET", "Ethiopia"),
    F("FI", "Finland"),
    F("FJ", "Fiji"),
    F("FK", "Falkland Islands"),
    F("FM", "Micronesia"),
    F("FO", "Faroe Islands"),
    F("FR", "France"),
    F("GA", "Gabon"),
    F("GB", "United Kingdom", "UK"),
    F("GB-ENG", "England"),
    F("GB-NIR", "Northern Ireland"),
    F("GB-SCT", "Scotland"),
    F("GB-WLS", "Wales"),
    F("GD", "Grenada"),
    F("GE", "Georgia"),
    F("GF", "French Guiana"),
    F("GG", "Guernsey"),
    F("GH", "Ghana"),
    F("GI", "Gibraltar"),
    F("GL", "Greenland"),
    F("GM", "Gambia"),
    F("GN", "Guinea"),
    F("GP", "Guadeloupe"),
    F("GQ", "Equatorial Guinea"),
    F("GR", "Greece"),
    F("GS", "South Georgia and the South Sandwich Islands"),
    F("GT", "Guatemala"),
    F("GU", "Guam"),
    F("GW", "Guinea-Bissau"),
    F("GY", "Guyana"),
    F("HK", "Hong Kong"),
    F("HM", "Heard Island and McDonald Islands"),
    F("HN", "Honduras"),
    F("HR", "Croatia"),
    F("HT", "Haiti"),
    F("HU", "Hungary"),
    F("IC", "Canary Islands"),
    F("ID", "Indonesia"),
    F("IE", "Ireland"),
    F("IL", "Israel"),
    F("IM", "Isle of Man"),
    F("IN", "India"),
    F("IO", "British Indian Ocean Territory"),
    F("IQ", "Iraq"),
    F("IR", "Iran"),
    F("IS", "Iceland"),
    F("IT", "Italy"),
    F("JE", "Jersey"),
    F("JM", "Jamaica"),
    F("JO", "Jordan"),
    F("JP", "Japan"),
    F("KE", "Kenya"),
    F("KG", "Kyrgyzstan"),
    F("KH", "Cambodia"),
    F("KI", "Kiribati"),
    F("KM", "Comoros"),
    F("KN", "Saint Kitts and Nevis"),
    F("KP", "North Korea"),
    F("KR", "South Korea"),
    F("KW", "Kuwait"),
    F("KY", "Cayman Islands"),
    F("KZ", "Kazakhstan"),
    F("LA", "Laos"),
    F("LB", "Lebanon"),
    F("LC", "Saint Lucia"),
    F("LI", "Liechtenstein"),
    F("LK", "Sri Lanka"),
    F("LR", "Liberia"),
    F("LS", "Lesotho"),
    F("LT", "Lithuania"),
    F("LU", "Luxembourg"),
    F("LV", "Latvia"),
    F("LY", "Libya"),
    F("MA", "Morocco"),
    F("MC", "Monaco"),
    F("MD", "Moldova"),
    F("ME", "Montenegro"),
    F("MF", "Saint Martin"),
    F("MG", "Madagascar"),
    F("MH", "Marshall Islands"),
    F("MK", "North Macedonia"),
    F("ML", "Mali"),
    F("MM", "Myanmar"),
    F("MN", "Mongolia"),
    F("MO", "Macao"),
    F("MP", "Northern Mariana Islands"),
    F("MQ", "Martinique"),
    F("MR", "Mauritania"),
    F("MS", "Montserrat"),
    F("MT", "Malta"),
    F("MU", "Mauritius"),
    F("MV", "Maldives"),
    F("MW", "Malawi"),
    F("MX", "Mexico"),
    F("MY", "Malaysia"),
    F("MZ", "Mozambique"),
    F("NA", "Namibia"),
    F("NC", "New Caledonia"),
    F("NE", "Niger"),
    F("NF", "Norfolk Island"),
    F("NG", "Nigeria"),
    F("NI", "Nicaragua"),
    F("NL", "Netherlands"),
    F("NO", "Norway"),
    F("NP", "Nepal"),
    F("NR", "Nauru"),
    F("NU", "Niue"),
    F("NZ", "New Zealand"),
    F("OM", "Oman"),
    F("PA", "Panama"),
    F("PE", "Peru"),
    F("PF", "French Polynesia"),
    F("PG", "Papua New Guinea"),
    F("PH", "Philippines"),
    F("PK", "Pakistan"),
    F("PL", "Poland"),
    F("PM", "Saint Pierre and Miquelon"),
    F("PN", "Pitcairn"),
    F("PR", "Puerto Rico"),
    F("PS", "Palestine"),
    F("PT", "Portugal"),
    F("PT-20", "Azores"),
    F("PT-30", "Madeira"),
    F("PW", "Palau"),
    F("PY", "Paraguay"),
    F("QA", "Qatar"),
    F("RE", "Reunion"),
    F("RO", "Romania"),
    F("RS", "Serbia"),
    F("RU", "Russia"),
    F("RU-TAT", "Tatarstan"),
    F("RW", "Rwanda"),
    F("SA", "Saudi Arabia"),
    F("SB", "Solomon Islands"),
    F("SC", "Seychelles"),
    F("SD", "Sudan"),
    F("SE", "Sweden"),
    F("SG", "Singapore"),
    F("SH", "Saint Helena"),
    F("SI", "Slovenia"),
    F("SJ", "Svalbard and Jan Mayen"),
    F("SK", "Slovakia"),
    F("SL", "Sierra Leone"),
    F("SM", "San Marino"),
    F("SN", "Senegal"),
    F("SO", "Somalia"),
    F("SR", "Suriname"),
    F("SS", "South Sudan"),
    F("ST", "Sao Tome and Principe"),
    F("SV", "El Salvador"),
    F("SX", "Sint Maarten"),
    F("SY", "Syria"),
    F("SZ", "Eswatini"),
    F("TC", "Turks and Caicos"),
    F("TD", "Chad"),
    F("TF", "French Southern Territories"),
    F("TG", "Togo"),
    F("TH", "Thailand"),
    F("TJ", "Tajikistan"),
    F("TK", "Tokelau"),
    F("TL", "Timor-Leste"),
    F("TM", "Turkmenistan"),
    F("TN", "Tunisia"),
    F("TO", "Tonga"),
    F("TR", "Turkiye"),
    F("TT", "Trinidad and Tobago"),
    F("TV", "Tuvalu"),
    F("TW", "Taiwan"),
    F("TZ", "Tanzania"),
    F("UA", "Ukraine"),
    F("UG", "Uganda"),
    F("UM", "United States Minor Outlying Islands"),
    F("US", "United States", "USA"),
    F("UY", "Uruguay"),
    F("UZ", "Uzbekistan"),
    F("VA", "Holy See"),
    F("VC", "Saint Vincent and the Grenadines"),
    F("VE", "Venezuela"),
    F("VG", "British Virgin Islands", "BVI"),
    F("VI", "U.S. Virgin Islands"),
    F("VN", "Vietnam"),
    F("VU", "Vanuatu"),
    F("WF", "Wallis and Futuna"),
    F("WS", "Samoa"),
    F("XK", "Kosovo"),
    F("YE", "Yemen"),
    F("YT", "Mayotte"),
    F("ZA", "South Africa"),
    F("ZM", "Zambia"),
    F("ZW", "Zimbabwe")
  ).sortBy(_.name) ::: List(
    // whatever
    F("EU", "European Union"),
    F("_adygea", "Adygea"),
    F("_belarus-wrw", "Belarus White-red-white"),
    F("_east-turkestan", "East Turkestan"),
    F("_kurdistan", "Kurdistan"),
    F("_russia-wbw", "Russia White-blue-white"),
    F("_united-nations", "United Nations"),
    F("_earth", "Earth")
  )

  val map: Map[FlagCode, Flag] = all.mapBy(_.code)

  val nameMap: Map[Flag, FlagName] = all.view
    .map: c =>
      c -> c.name
    .toMap

  val codeSet: Set[FlagCode] = map.keySet

  val nonCountries: List[FlagCode] = FlagCode.from:
    List("_united-nations", "_earth")

  def info(code: FlagCode): Option[Flag] = map.get(code)
  def name(flag: Flag): FlagName         = nameMap.getOrElse(flag, flag.name)
