// Generated
package lila.core.i18n

opaque type I18nKey = String
object I18nKey:
  def apply(key: String): I18nKey = key
  import scalatags.Text.RawFrag
  extension (key: I18nKey)
    def value: String = key
    def txt(args: Any*)(using trans: Translate): String =
      trans.translator.txt.literal(key, args, trans.lang)
    def pluralTxt(count: Count, args: Any*)(using trans: Translate): String =
      trans.translator.txt.plural(key, count, args, trans.lang)
    def pluralSameTxt(count: Long)(using trans: Translate): String = pluralTxt(count, count)
    def apply(args: Matchable*)(using trans: Translate): RawFrag =
      trans.translator.frag.literal(key, args, trans.lang)
    def plural(count: Count, args: Matchable*)(using trans: Translate): RawFrag =
      trans.translator.frag.plural(key, count, args, trans.lang)
    def pluralSame(count: Int)(using trans: Translate): RawFrag = plural(count, count)

  // format: OFF
  object activity:
    val `activity`: I18nKey = "activity:activity"
    val `competedInNbSwissTournaments`: I18nKey = "activity:competedInNbSwissTournaments"
    val `competedInNbTournaments`: I18nKey = "activity:competedInNbTournaments"
    val `completedNbGames`: I18nKey = "activity:completedNbGames"
    val `completedNbVariantGames`: I18nKey = "activity:completedNbVariantGames"
    val `createdNbStudies`: I18nKey = "activity:createdNbStudies"
    val `followedNbPlayers`: I18nKey = "activity:followedNbPlayers"
    val `gainedNbFollowers`: I18nKey = "activity:gainedNbFollowers"
    val `hostedALiveStream`: I18nKey = "activity:hostedALiveStream"
    val `hostedNbSimuls`: I18nKey = "activity:hostedNbSimuls"
    val `inNbCorrespondenceGames`: I18nKey = "activity:inNbCorrespondenceGames"
    val `joinedNbSimuls`: I18nKey = "activity:joinedNbSimuls"
    val `joinedNbTeams`: I18nKey = "activity:joinedNbTeams"
    val `playedNbGames`: I18nKey = "activity:playedNbGames"
    val `playedNbMoves`: I18nKey = "activity:playedNbMoves"
    val `postedNbMessages`: I18nKey = "activity:postedNbMessages"
    val `practicedNbPositions`: I18nKey = "activity:practicedNbPositions"
    val `rankedInSwissTournament`: I18nKey = "activity:rankedInSwissTournament"
    val `rankedInTournament`: I18nKey = "activity:rankedInTournament"
    val `signedUp`: I18nKey = "activity:signedUp"
    val `solvedNbPuzzles`: I18nKey = "activity:solvedNbPuzzles"
    val `supportedNbMonths`: I18nKey = "activity:supportedNbMonths"

  object appeal:
    val `accountMuted`: I18nKey = "appeal:accountMuted"
    val `accountMutedInfo`: I18nKey = "appeal:accountMutedInfo"
    val `arenaBanned`: I18nKey = "appeal:arenaBanned"
    val `blogRules`: I18nKey = "appeal:blogRules"
    val `boosterMarked`: I18nKey = "appeal:boosterMarked"
    val `boosterMarkedInfo`: I18nKey = "appeal:boosterMarkedInfo"
    val `cleanAllGood`: I18nKey = "appeal:cleanAllGood"
    val `closedByModerators`: I18nKey = "appeal:closedByModerators"
    val `communicationGuidelines`: I18nKey = "appeal:communicationGuidelines"
    val `engineMarked`: I18nKey = "appeal:engineMarked"
    val `engineMarkedInfo`: I18nKey = "appeal:engineMarkedInfo"
    val `excludedFromLeaderboards`: I18nKey = "appeal:excludedFromLeaderboards"
    val `excludedFromLeaderboardsInfo`: I18nKey = "appeal:excludedFromLeaderboardsInfo"
    val `fairPlay`: I18nKey = "appeal:fairPlay"
    val `hiddenBlog`: I18nKey = "appeal:hiddenBlog"
    val `hiddenBlogInfo`: I18nKey = "appeal:hiddenBlogInfo"
    val `playTimeout`: I18nKey = "appeal:playTimeout"
    val `prizeBanned`: I18nKey = "appeal:prizeBanned"

  object arena:
    val `allAveragesAreX`: I18nKey = "arena:allAveragesAreX"
    val `allowBerserk`: I18nKey = "arena:allowBerserk"
    val `allowBerserkHelp`: I18nKey = "arena:allowBerserkHelp"
    val `allowChatHelp`: I18nKey = "arena:allowChatHelp"
    val `arena`: I18nKey = "arena:arena"
    val `arenaStreaks`: I18nKey = "arena:arenaStreaks"
    val `arenaStreaksHelp`: I18nKey = "arena:arenaStreaksHelp"
    val `arenaTournaments`: I18nKey = "arena:arenaTournaments"
    val `averagePerformance`: I18nKey = "arena:averagePerformance"
    val `averageScore`: I18nKey = "arena:averageScore"
    val `berserk`: I18nKey = "arena:berserk"
    val `berserkAnswer`: I18nKey = "arena:berserkAnswer"
    val `bestResults`: I18nKey = "arena:bestResults"
    val `created`: I18nKey = "arena:created"
    val `customStartDate`: I18nKey = "arena:customStartDate"
    val `customStartDateHelp`: I18nKey = "arena:customStartDateHelp"
    val `defender`: I18nKey = "arena:defender"
    val `drawingWithinNbMoves`: I18nKey = "arena:drawingWithinNbMoves"
    val `drawStreakStandard`: I18nKey = "arena:drawStreakStandard"
    val `drawStreakVariants`: I18nKey = "arena:drawStreakVariants"
    val `editTeamBattle`: I18nKey = "arena:editTeamBattle"
    val `editTournament`: I18nKey = "arena:editTournament"
    val `history`: I18nKey = "arena:history"
    val `howAreScoresCalculated`: I18nKey = "arena:howAreScoresCalculated"
    val `howAreScoresCalculatedAnswer`: I18nKey = "arena:howAreScoresCalculatedAnswer"
    val `howDoesItEnd`: I18nKey = "arena:howDoesItEnd"
    val `howDoesItEndAnswer`: I18nKey = "arena:howDoesItEndAnswer"
    val `howDoesPairingWork`: I18nKey = "arena:howDoesPairingWork"
    val `howDoesPairingWorkAnswer`: I18nKey = "arena:howDoesPairingWorkAnswer"
    val `howIsTheWinnerDecided`: I18nKey = "arena:howIsTheWinnerDecided"
    val `howIsTheWinnerDecidedAnswer`: I18nKey = "arena:howIsTheWinnerDecidedAnswer"
    val `isItRated`: I18nKey = "arena:isItRated"
    val `isNotRated`: I18nKey = "arena:isNotRated"
    val `isRated`: I18nKey = "arena:isRated"
    val `medians`: I18nKey = "arena:medians"
    val `minimumGameLength`: I18nKey = "arena:minimumGameLength"
    val `myTournaments`: I18nKey = "arena:myTournaments"
    val `newTeamBattle`: I18nKey = "arena:newTeamBattle"
    val `noArenaStreaks`: I18nKey = "arena:noArenaStreaks"
    val `noBerserkAllowed`: I18nKey = "arena:noBerserkAllowed"
    val `onlyTitled`: I18nKey = "arena:onlyTitled"
    val `onlyTitledHelp`: I18nKey = "arena:onlyTitledHelp"
    val `otherRules`: I18nKey = "arena:otherRules"
    val `pickYourTeam`: I18nKey = "arena:pickYourTeam"
    val `pointsAvg`: I18nKey = "arena:pointsAvg"
    val `pointsSum`: I18nKey = "arena:pointsSum"
    val `rankAvg`: I18nKey = "arena:rankAvg"
    val `rankAvgHelp`: I18nKey = "arena:rankAvgHelp"
    val `recentlyPlayed`: I18nKey = "arena:recentlyPlayed"
    val `shareUrl`: I18nKey = "arena:shareUrl"
    val `someRated`: I18nKey = "arena:someRated"
    val `stats`: I18nKey = "arena:stats"
    val `thereIsACountdown`: I18nKey = "arena:thereIsACountdown"
    val `thisIsPrivate`: I18nKey = "arena:thisIsPrivate"
    val `total`: I18nKey = "arena:total"
    val `tournamentShields`: I18nKey = "arena:tournamentShields"
    val `tournamentStats`: I18nKey = "arena:tournamentStats"
    val `tournamentWinners`: I18nKey = "arena:tournamentWinners"
    val `variant`: I18nKey = "arena:variant"
    val `viewAllXTeams`: I18nKey = "arena:viewAllXTeams"
    val `whichTeamWillYouRepresentInThisBattle`: I18nKey = "arena:whichTeamWillYouRepresentInThisBattle"
    val `willBeNotified`: I18nKey = "arena:willBeNotified"
    val `youMustJoinOneOfTheseTeamsToParticipate`: I18nKey = "arena:youMustJoinOneOfTheseTeamsToParticipate"

  object broadcast:
    val `aboutBroadcasts`: I18nKey = "broadcast:aboutBroadcasts"
    val `addRound`: I18nKey = "broadcast:addRound"
    val `ageThisYear`: I18nKey = "broadcast:ageThisYear"
    val `broadcastCalendar`: I18nKey = "broadcast:broadcastCalendar"
    val `broadcasts`: I18nKey = "broadcast:broadcasts"
    val `completed`: I18nKey = "broadcast:completed"
    val `completedHelp`: I18nKey = "broadcast:completedHelp"
    val `credits`: I18nKey = "broadcast:credits"
    val `currentGameUrl`: I18nKey = "broadcast:currentGameUrl"
    val `definitivelyDeleteRound`: I18nKey = "broadcast:definitivelyDeleteRound"
    val `definitivelyDeleteTournament`: I18nKey = "broadcast:definitivelyDeleteTournament"
    val `deleteAllGamesOfThisRound`: I18nKey = "broadcast:deleteAllGamesOfThisRound"
    val `deleteRound`: I18nKey = "broadcast:deleteRound"
    val `deleteTournament`: I18nKey = "broadcast:deleteTournament"
    val `downloadAllRounds`: I18nKey = "broadcast:downloadAllRounds"
    val `editRoundStudy`: I18nKey = "broadcast:editRoundStudy"
    val `federation`: I18nKey = "broadcast:federation"
    val `fideFederations`: I18nKey = "broadcast:fideFederations"
    val `fidePlayerNotFound`: I18nKey = "broadcast:fidePlayerNotFound"
    val `fidePlayers`: I18nKey = "broadcast:fidePlayers"
    val `fideProfile`: I18nKey = "broadcast:fideProfile"
    val `fullDescription`: I18nKey = "broadcast:fullDescription"
    val `fullDescriptionHelp`: I18nKey = "broadcast:fullDescriptionHelp"
    val `howToUseLichessBroadcasts`: I18nKey = "broadcast:howToUseLichessBroadcasts"
    val `liveBroadcasts`: I18nKey = "broadcast:liveBroadcasts"
    val `myBroadcasts`: I18nKey = "broadcast:myBroadcasts"
    val `nbBroadcasts`: I18nKey = "broadcast:nbBroadcasts"
    val `newBroadcast`: I18nKey = "broadcast:newBroadcast"
    val `ongoing`: I18nKey = "broadcast:ongoing"
    val `periodInSeconds`: I18nKey = "broadcast:periodInSeconds"
    val `periodInSecondsHelp`: I18nKey = "broadcast:periodInSecondsHelp"
    val `recentTournaments`: I18nKey = "broadcast:recentTournaments"
    val `replacePlayerTags`: I18nKey = "broadcast:replacePlayerTags"
    val `resetRound`: I18nKey = "broadcast:resetRound"
    val `roundName`: I18nKey = "broadcast:roundName"
    val `roundNumber`: I18nKey = "broadcast:roundNumber"
    val `showScores`: I18nKey = "broadcast:showScores"
    val `sourceGameIds`: I18nKey = "broadcast:sourceGameIds"
    val `sourceSingleUrl`: I18nKey = "broadcast:sourceSingleUrl"
    val `sourceUrlHelp`: I18nKey = "broadcast:sourceUrlHelp"
    val `startDateHelp`: I18nKey = "broadcast:startDateHelp"
    val `startDateTimeZone`: I18nKey = "broadcast:startDateTimeZone"
    val `subscribedBroadcasts`: I18nKey = "broadcast:subscribedBroadcasts"
    val `theNewRoundHelp`: I18nKey = "broadcast:theNewRoundHelp"
    val `top10Rating`: I18nKey = "broadcast:top10Rating"
    val `tournamentDescription`: I18nKey = "broadcast:tournamentDescription"
    val `tournamentName`: I18nKey = "broadcast:tournamentName"
    val `unrated`: I18nKey = "broadcast:unrated"
    val `upcoming`: I18nKey = "broadcast:upcoming"

  object challenge:
    val `cannotChallengeDueToProvisionalXRating`: I18nKey = "challenge:cannotChallengeDueToProvisionalXRating"
    val `challengeAccepted`: I18nKey = "challenge:challengeAccepted"
    val `challengeCanceled`: I18nKey = "challenge:challengeCanceled"
    val `challengeDeclined`: I18nKey = "challenge:challengeDeclined"
    val `challengesX`: I18nKey = "challenge:challengesX"
    val `challengeToPlay`: I18nKey = "challenge:challengeToPlay"
    val `declineCasual`: I18nKey = "challenge:declineCasual"
    val `declineGeneric`: I18nKey = "challenge:declineGeneric"
    val `declineLater`: I18nKey = "challenge:declineLater"
    val `declineNoBot`: I18nKey = "challenge:declineNoBot"
    val `declineOnlyBot`: I18nKey = "challenge:declineOnlyBot"
    val `declineRated`: I18nKey = "challenge:declineRated"
    val `declineStandard`: I18nKey = "challenge:declineStandard"
    val `declineTimeControl`: I18nKey = "challenge:declineTimeControl"
    val `declineTooFast`: I18nKey = "challenge:declineTooFast"
    val `declineTooSlow`: I18nKey = "challenge:declineTooSlow"
    val `declineVariant`: I18nKey = "challenge:declineVariant"
    val `inviteLichessUser`: I18nKey = "challenge:inviteLichessUser"
    val `registerToSendChallenges`: I18nKey = "challenge:registerToSendChallenges"
    val `xDoesNotAcceptChallenges`: I18nKey = "challenge:xDoesNotAcceptChallenges"
    val `xOnlyAcceptsChallengesFromFriends`: I18nKey = "challenge:xOnlyAcceptsChallengesFromFriends"
    val `youCannotChallengeX`: I18nKey = "challenge:youCannotChallengeX"
    val `yourXRatingIsTooFarFromY`: I18nKey = "challenge:yourXRatingIsTooFarFromY"

  object clas:
    val `addLichessUsernames`: I18nKey = "class:addLichessUsernames"
    val `addStudent`: I18nKey = "class:addStudent"
    val `aLinkToTheClassWillBeAdded`: I18nKey = "class:aLinkToTheClassWillBeAdded"
    val `anInvitationHasBeenSentToX`: I18nKey = "class:anInvitationHasBeenSentToX"
    val `applyToBeLichessTeacher`: I18nKey = "class:applyToBeLichessTeacher"
    val `classDescription`: I18nKey = "class:classDescription"
    val `className`: I18nKey = "class:className"
    val `classNews`: I18nKey = "class:classNews"
    val `clickToViewInvitation`: I18nKey = "class:clickToViewInvitation"
    val `closeClass`: I18nKey = "class:closeClass"
    val `closeDesc1`: I18nKey = "class:closeDesc1"
    val `closeDesc2`: I18nKey = "class:closeDesc2"
    val `closeStudent`: I18nKey = "class:closeStudent"
    val `closeTheAccount`: I18nKey = "class:closeTheAccount"
    val `createANewLichessAccount`: I18nKey = "class:createANewLichessAccount"
    val `createDesc1`: I18nKey = "class:createDesc1"
    val `createDesc2`: I18nKey = "class:createDesc2"
    val `createDesc3`: I18nKey = "class:createDesc3"
    val `createDesc4`: I18nKey = "class:createDesc4"
    val `createMoreClasses`: I18nKey = "class:createMoreClasses"
    val `createMultipleAccounts`: I18nKey = "class:createMultipleAccounts"
    val `createStudentWarning`: I18nKey = "class:createStudentWarning"
    val `editNews`: I18nKey = "class:editNews"
    val `features`: I18nKey = "class:features"
    val `freeForAllForever`: I18nKey = "class:freeForAllForever"
    val `generateANewPassword`: I18nKey = "class:generateANewPassword"
    val `generateANewUsername`: I18nKey = "class:generateANewUsername"
    val `invitationToClass`: I18nKey = "class:invitationToClass"
    val `invite`: I18nKey = "class:invite"
    val `inviteALichessAccount`: I18nKey = "class:inviteALichessAccount"
    val `inviteDesc1`: I18nKey = "class:inviteDesc1"
    val `inviteDesc2`: I18nKey = "class:inviteDesc2"
    val `inviteDesc3`: I18nKey = "class:inviteDesc3"
    val `inviteDesc4`: I18nKey = "class:inviteDesc4"
    val `invitedToXByY`: I18nKey = "class:invitedToXByY"
    val `inviteTheStudentBack`: I18nKey = "class:inviteTheStudentBack"
    val `lastActiveDate`: I18nKey = "class:lastActiveDate"
    val `lichessClasses`: I18nKey = "class:lichessClasses"
    val `lichessProfileXCreatedForY`: I18nKey = "class:lichessProfileXCreatedForY"
    val `lichessUsername`: I18nKey = "class:lichessUsername"
    val `makeSureToCopy`: I18nKey = "class:makeSureToCopy"
    val `managed`: I18nKey = "class:managed"
    val `maxStudentsNote`: I18nKey = "class:maxStudentsNote"
    val `messageAllStudents`: I18nKey = "class:messageAllStudents"
    val `multipleAccsFormDescription`: I18nKey = "class:multipleAccsFormDescription"
    val `na`: I18nKey = "class:na"
    val `nbPendingInvitations`: I18nKey = "class:nbPendingInvitations"
    val `nbStudents`: I18nKey = "class:nbStudents"
    val `nbTeachers`: I18nKey = "class:nbTeachers"
    val `newClass`: I18nKey = "class:newClass"
    val `news`: I18nKey = "class:news"
    val `newsEdit1`: I18nKey = "class:newsEdit1"
    val `newsEdit2`: I18nKey = "class:newsEdit2"
    val `newsEdit3`: I18nKey = "class:newsEdit3"
    val `noClassesYet`: I18nKey = "class:noClassesYet"
    val `noRemovedStudents`: I18nKey = "class:noRemovedStudents"
    val `noStudents`: I18nKey = "class:noStudents"
    val `nothingHere`: I18nKey = "class:nothingHere"
    val `notifyAllStudents`: I18nKey = "class:notifyAllStudents"
    val `onlyVisibleToTeachers`: I18nKey = "class:onlyVisibleToTeachers"
    val `orSeparator`: I18nKey = "class:orSeparator"
    val `overDays`: I18nKey = "class:overDays"
    val `overview`: I18nKey = "class:overview"
    val `passwordX`: I18nKey = "class:passwordX"
    val `privateWillNeverBeShown`: I18nKey = "class:privateWillNeverBeShown"
    val `progress`: I18nKey = "class:progress"
    val `quicklyGenerateSafeUsernames`: I18nKey = "class:quicklyGenerateSafeUsernames"
    val `realName`: I18nKey = "class:realName"
    val `realUniqueEmail`: I18nKey = "class:realUniqueEmail"
    val `release`: I18nKey = "class:release"
    val `releaseDesc1`: I18nKey = "class:releaseDesc1"
    val `releaseDesc2`: I18nKey = "class:releaseDesc2"
    val `releaseTheAccount`: I18nKey = "class:releaseTheAccount"
    val `removedByX`: I18nKey = "class:removedByX"
    val `removedStudents`: I18nKey = "class:removedStudents"
    val `removeStudent`: I18nKey = "class:removeStudent"
    val `reopen`: I18nKey = "class:reopen"
    val `resetPassword`: I18nKey = "class:resetPassword"
    val `sendAMessage`: I18nKey = "class:sendAMessage"
    val `studentCredentials`: I18nKey = "class:studentCredentials"
    val `students`: I18nKey = "class:students"
    val `studentsRealNamesOnePerLine`: I18nKey = "class:studentsRealNamesOnePerLine"
    val `teachClassesOfChessStudents`: I18nKey = "class:teachClassesOfChessStudents"
    val `teachers`: I18nKey = "class:teachers"
    val `teachersOfTheClass`: I18nKey = "class:teachersOfTheClass"
    val `teachersX`: I18nKey = "class:teachersX"
    val `thisStudentAccountIsManaged`: I18nKey = "class:thisStudentAccountIsManaged"
    val `timePlaying`: I18nKey = "class:timePlaying"
    val `trackStudentProgress`: I18nKey = "class:trackStudentProgress"
    val `upgradeFromManaged`: I18nKey = "class:upgradeFromManaged"
    val `useThisForm`: I18nKey = "class:useThisForm"
    val `variantXOverLastY`: I18nKey = "class:variantXOverLastY"
    val `visibleByBothStudentsAndTeachers`: I18nKey = "class:visibleByBothStudentsAndTeachers"
    val `welcomeToClass`: I18nKey = "class:welcomeToClass"
    val `winrate`: I18nKey = "class:winrate"
    val `xAlreadyHasAPendingInvitation`: I18nKey = "class:xAlreadyHasAPendingInvitation"
    val `xIsAKidAccountWarning`: I18nKey = "class:xIsAKidAccountWarning"
    val `xisNowAStudentOfTheClass`: I18nKey = "class:xisNowAStudentOfTheClass"
    val `youAcceptedThisInvitation`: I18nKey = "class:youAcceptedThisInvitation"
    val `youDeclinedThisInvitation`: I18nKey = "class:youDeclinedThisInvitation"
    val `youHaveBeenInvitedByX`: I18nKey = "class:youHaveBeenInvitedByX"

  object coach:
    val `aboutMe`: I18nKey = "coach:aboutMe"
    val `accepting`: I18nKey = "coach:accepting"
    val `areYouCoach`: I18nKey = "coach:areYouCoach"
    val `availability`: I18nKey = "coach:availability"
    val `bestSkills`: I18nKey = "coach:bestSkills"
    val `confirmTitle`: I18nKey = "coach:confirmTitle"
    val `hourlyRate`: I18nKey = "coach:hourlyRate"
    val `languages`: I18nKey = "coach:languages"
    val `lichessCoach`: I18nKey = "coach:lichessCoach"
    val `lichessCoaches`: I18nKey = "coach:lichessCoaches"
    val `location`: I18nKey = "coach:location"
    val `nmOrFideTitle`: I18nKey = "coach:nmOrFideTitle"
    val `notAccepting`: I18nKey = "coach:notAccepting"
    val `otherExperiences`: I18nKey = "coach:otherExperiences"
    val `playingExperience`: I18nKey = "coach:playingExperience"
    val `publicStudies`: I18nKey = "coach:publicStudies"
    val `rating`: I18nKey = "coach:rating"
    val `sendApplication`: I18nKey = "coach:sendApplication"
    val `sendPM`: I18nKey = "coach:sendPM"
    val `teachingExperience`: I18nKey = "coach:teachingExperience"
    val `teachingMethod`: I18nKey = "coach:teachingMethod"
    val `viewXProfile`: I18nKey = "coach:viewXProfile"
    val `xCoachesStudents`: I18nKey = "coach:xCoachesStudents"
    val `youtubeVideos`: I18nKey = "coach:youtubeVideos"

  object contact:
    val `accountLost`: I18nKey = "contact:accountLost"
    val `accountSupport`: I18nKey = "contact:accountSupport"
    val `authorizationToUse`: I18nKey = "contact:authorizationToUse"
    val `banAppeal`: I18nKey = "contact:banAppeal"
    val `botRatingAbuse`: I18nKey = "contact:botRatingAbuse"
    val `buyingLichess`: I18nKey = "contact:buyingLichess"
    val `calledEnPassant`: I18nKey = "contact:calledEnPassant"
    val `cantChangeMore`: I18nKey = "contact:cantChangeMore"
    val `cantClearHistory`: I18nKey = "contact:cantClearHistory"
    val `castlingImported`: I18nKey = "contact:castlingImported"
    val `castlingPrevented`: I18nKey = "contact:castlingPrevented"
    val `castlingRules`: I18nKey = "contact:castlingRules"
    val `changeUsernameCase`: I18nKey = "contact:changeUsernameCase"
    val `closeYourAccount`: I18nKey = "contact:closeYourAccount"
    val `collaboration`: I18nKey = "contact:collaboration"
    val `contact`: I18nKey = "contact:contact"
    val `contactLichess`: I18nKey = "contact:contactLichess"
    val `creditAppreciated`: I18nKey = "contact:creditAppreciated"
    val `doNotAskByEmail`: I18nKey = "contact:doNotAskByEmail"
    val `doNotAskByEmailToReopen`: I18nKey = "contact:doNotAskByEmailToReopen"
    val `doNotDeny`: I18nKey = "contact:doNotDeny"
    val `doNotMessageModerators`: I18nKey = "contact:doNotMessageModerators"
    val `doNotReportInForum`: I18nKey = "contact:doNotReportInForum"
    val `doNotSendReportEmails`: I18nKey = "contact:doNotSendReportEmails"
    val `doPasswordReset`: I18nKey = "contact:doPasswordReset"
    val `engineAppeal`: I18nKey = "contact:engineAppeal"
    val `errorPage`: I18nKey = "contact:errorPage"
    val `explainYourRequest`: I18nKey = "contact:explainYourRequest"
    val `falsePositives`: I18nKey = "contact:falsePositives"
    val `fideMate`: I18nKey = "contact:fideMate"
    val `forgotPassword`: I18nKey = "contact:forgotPassword"
    val `forgotUsername`: I18nKey = "contact:forgotUsername"
    val `howToReportBug`: I18nKey = "contact:howToReportBug"
    val `iCantLogIn`: I18nKey = "contact:iCantLogIn"
    val `ifLegit`: I18nKey = "contact:ifLegit"
    val `illegalCastling`: I18nKey = "contact:illegalCastling"
    val `illegalPawnCapture`: I18nKey = "contact:illegalPawnCapture"
    val `insufficientMaterial`: I18nKey = "contact:insufficientMaterial"
    val `knightMate`: I18nKey = "contact:knightMate"
    val `learnHowToMakeBroadcasts`: I18nKey = "contact:learnHowToMakeBroadcasts"
    val `lost2FA`: I18nKey = "contact:lost2FA"
    val `monetizing`: I18nKey = "contact:monetizing"
    val `noConfirmationEmail`: I18nKey = "contact:noConfirmationEmail"
    val `noneOfTheAbove`: I18nKey = "contact:noneOfTheAbove"
    val `noRatingPoints`: I18nKey = "contact:noRatingPoints"
    val `onlyReports`: I18nKey = "contact:onlyReports"
    val `orCloseAccount`: I18nKey = "contact:orCloseAccount"
    val `otherRestriction`: I18nKey = "contact:otherRestriction"
    val `ratedGame`: I18nKey = "contact:ratedGame"
    val `reopenOnThisPage`: I18nKey = "contact:reopenOnThisPage"
    val `reportBugInDiscord`: I18nKey = "contact:reportBugInDiscord"
    val `reportBugInForum`: I18nKey = "contact:reportBugInForum"
    val `reportErrorPage`: I18nKey = "contact:reportErrorPage"
    val `reportMobileIssue`: I18nKey = "contact:reportMobileIssue"
    val `reportWebsiteIssue`: I18nKey = "contact:reportWebsiteIssue"
    val `sendAppealTo`: I18nKey = "contact:sendAppealTo"
    val `sendEmailAt`: I18nKey = "contact:sendEmailAt"
    val `toReportAPlayerUseForm`: I18nKey = "contact:toReportAPlayerUseForm"
    val `tryCastling`: I18nKey = "contact:tryCastling"
    val `tryEnPassant`: I18nKey = "contact:tryEnPassant"
    val `videosAndBooks`: I18nKey = "contact:videosAndBooks"
    val `visitThisPage`: I18nKey = "contact:visitThisPage"
    val `visitTitleConfirmation`: I18nKey = "contact:visitTitleConfirmation"
    val `wantChangeUsername`: I18nKey = "contact:wantChangeUsername"
    val `wantClearHistory`: I18nKey = "contact:wantClearHistory"
    val `wantCloseAccount`: I18nKey = "contact:wantCloseAccount"
    val `wantReopen`: I18nKey = "contact:wantReopen"
    val `wantReport`: I18nKey = "contact:wantReport"
    val `wantReportBug`: I18nKey = "contact:wantReportBug"
    val `wantTitle`: I18nKey = "contact:wantTitle"
    val `welcomeToUse`: I18nKey = "contact:welcomeToUse"
    val `whatCanWeHelpYouWith`: I18nKey = "contact:whatCanWeHelpYouWith"
    val `youCanAlsoReachReportPage`: I18nKey = "contact:youCanAlsoReachReportPage"
    val `youCanLoginWithEmail`: I18nKey = "contact:youCanLoginWithEmail"

  object coordinates:
    val `aCoordinateAppears`: I18nKey = "coordinates:aCoordinateAppears"
    val `aSquareIsHighlightedExplanation`: I18nKey = "coordinates:aSquareIsHighlightedExplanation"
    val `averageScoreAsBlackX`: I18nKey = "coordinates:averageScoreAsBlackX"
    val `averageScoreAsWhiteX`: I18nKey = "coordinates:averageScoreAsWhiteX"
    val `coordinates`: I18nKey = "coordinates:coordinates"
    val `coordinateTraining`: I18nKey = "coordinates:coordinateTraining"
    val `findSquare`: I18nKey = "coordinates:findSquare"
    val `goAsLongAsYouWant`: I18nKey = "coordinates:goAsLongAsYouWant"
    val `knowingTheChessBoard`: I18nKey = "coordinates:knowingTheChessBoard"
    val `mostChessCourses`: I18nKey = "coordinates:mostChessCourses"
    val `nameSquare`: I18nKey = "coordinates:nameSquare"
    val `showCoordinates`: I18nKey = "coordinates:showCoordinates"
    val `showCoordsOnAllSquares`: I18nKey = "coordinates:showCoordsOnAllSquares"
    val `showPieces`: I18nKey = "coordinates:showPieces"
    val `startTraining`: I18nKey = "coordinates:startTraining"
    val `talkToYourChessFriends`: I18nKey = "coordinates:talkToYourChessFriends"
    val `youCanAnalyseAGameMoreEffectively`: I18nKey = "coordinates:youCanAnalyseAGameMoreEffectively"
    val `youHaveThirtySeconds`: I18nKey = "coordinates:youHaveThirtySeconds"

  object dgt:
    val `announceAllMoves`: I18nKey = "dgt:announceAllMoves"
    val `announceMoveFormat`: I18nKey = "dgt:announceMoveFormat"
    val `asALastResort`: I18nKey = "dgt:asALastResort"
    val `boardWillAutoConnect`: I18nKey = "dgt:boardWillAutoConnect"
    val `checkYouHaveMadeOpponentsMove`: I18nKey = "dgt:checkYouHaveMadeOpponentsMove"
    val `clickToGenerateOne`: I18nKey = "dgt:clickToGenerateOne"
    val `configurationSection`: I18nKey = "dgt:configurationSection"
    val `configure`: I18nKey = "dgt:configure"
    val `configureVoiceNarration`: I18nKey = "dgt:configureVoiceNarration"
    val `debug`: I18nKey = "dgt:debug"
    val `dgtBoard`: I18nKey = "dgt:dgtBoard"
    val `dgtBoardConnectivity`: I18nKey = "dgt:dgtBoardConnectivity"
    val `dgtBoardLimitations`: I18nKey = "dgt:dgtBoardLimitations"
    val `dgtBoardRequirements`: I18nKey = "dgt:dgtBoardRequirements"
    val `dgtConfigure`: I18nKey = "dgt:dgtConfigure"
    val `dgtPlayMenuEntryAdded`: I18nKey = "dgt:dgtPlayMenuEntryAdded"
    val `downloadHere`: I18nKey = "dgt:downloadHere"
    val `enableSpeechSynthesis`: I18nKey = "dgt:enableSpeechSynthesis"
    val `ifLiveChessRunningElsewhere`: I18nKey = "dgt:ifLiveChessRunningElsewhere"
    val `ifLiveChessRunningOnThisComputer`: I18nKey = "dgt:ifLiveChessRunningOnThisComputer"
    val `ifMoveNotDetected`: I18nKey = "dgt:ifMoveNotDetected"
    val `keepPlayPageOpen`: I18nKey = "dgt:keepPlayPageOpen"
    val `keywordFormatDescription`: I18nKey = "dgt:keywordFormatDescription"
    val `keywords`: I18nKey = "dgt:keywords"
    val `lichessAndDgt`: I18nKey = "dgt:lichessAndDgt"
    val `lichessConnectivity`: I18nKey = "dgt:lichessConnectivity"
    val `moveFormatDescription`: I18nKey = "dgt:moveFormatDescription"
    val `noSuitableOauthToken`: I18nKey = "dgt:noSuitableOauthToken"
    val `openingThisLink`: I18nKey = "dgt:openingThisLink"
    val `playWithDgtBoard`: I18nKey = "dgt:playWithDgtBoard"
    val `reloadThisPage`: I18nKey = "dgt:reloadThisPage"
    val `selectAnnouncePreference`: I18nKey = "dgt:selectAnnouncePreference"
    val `speechSynthesisVoice`: I18nKey = "dgt:speechSynthesisVoice"
    val `textToSpeech`: I18nKey = "dgt:textToSpeech"
    val `thisPageAllowsConnectingDgtBoard`: I18nKey = "dgt:thisPageAllowsConnectingDgtBoard"
    val `timeControlsForCasualGames`: I18nKey = "dgt:timeControlsForCasualGames"
    val `timeControlsForRatedGames`: I18nKey = "dgt:timeControlsForRatedGames"
    val `toConnectTheDgtBoard`: I18nKey = "dgt:toConnectTheDgtBoard"
    val `toSeeConsoleMessage`: I18nKey = "dgt:toSeeConsoleMessage"
    val `useWebSocketUrl`: I18nKey = "dgt:useWebSocketUrl"
    val `validDgtOauthToken`: I18nKey = "dgt:validDgtOauthToken"
    val `verboseLogging`: I18nKey = "dgt:verboseLogging"
    val `webSocketUrl`: I18nKey = "dgt:webSocketUrl"
    val `whenReadySetupBoard`: I18nKey = "dgt:whenReadySetupBoard"

  object emails:
    val `common_contact`: I18nKey = "emails:common_contact"
    val `common_note`: I18nKey = "emails:common_note"
    val `common_orPaste`: I18nKey = "emails:common_orPaste"
    val `emailChange_click`: I18nKey = "emails:emailChange_click"
    val `emailChange_intro`: I18nKey = "emails:emailChange_intro"
    val `emailChange_subject`: I18nKey = "emails:emailChange_subject"
    val `emailConfirm_click`: I18nKey = "emails:emailConfirm_click"
    val `emailConfirm_ignore`: I18nKey = "emails:emailConfirm_ignore"
    val `emailConfirm_subject`: I18nKey = "emails:emailConfirm_subject"
    val `logInToLichess`: I18nKey = "emails:logInToLichess"
    val `passwordReset_clickOrIgnore`: I18nKey = "emails:passwordReset_clickOrIgnore"
    val `passwordReset_intro`: I18nKey = "emails:passwordReset_intro"
    val `passwordReset_subject`: I18nKey = "emails:passwordReset_subject"
    val `welcome_subject`: I18nKey = "emails:welcome_subject"
    val `welcome_text`: I18nKey = "emails:welcome_text"

  object faq:
    val `accounts`: I18nKey = "faq:accounts"
    val `acplExplanation`: I18nKey = "faq:acplExplanation"
    val `adviceOnMitigatingAddiction`: I18nKey = "faq:adviceOnMitigatingAddiction"
    val `aHourlyBulletTournament`: I18nKey = "faq:aHourlyBulletTournament"
    val `areThereWebsitesBasedOnLichess`: I18nKey = "faq:areThereWebsitesBasedOnLichess"
    val `asWellAsManyNMtitles`: I18nKey = "faq:asWellAsManyNMtitles"
    val `basedOnGameDuration`: I18nKey = "faq:basedOnGameDuration"
    val `beingAPatron`: I18nKey = "faq:beingAPatron"
    val `beInTopTen`: I18nKey = "faq:beInTopTen"
    val `breakdownOfOurCosts`: I18nKey = "faq:breakdownOfOurCosts"
    val `canIbecomeLM`: I18nKey = "faq:canIbecomeLM"
    val `canIChangeMyUsername`: I18nKey = "faq:canIChangeMyUsername"
    val `configure`: I18nKey = "faq:configure"
    val `connexionLostCanIGetMyRatingBack`: I18nKey = "faq:connexionLostCanIGetMyRatingBack"
    val `desktop`: I18nKey = "faq:desktop"
    val `discoveringEnPassant`: I18nKey = "faq:discoveringEnPassant"
    val `displayPreferences`: I18nKey = "faq:displayPreferences"
    val `durationFormula`: I18nKey = "faq:durationFormula"
    val `eightVariants`: I18nKey = "faq:eightVariants"
    val `enableAutoplayForSoundsA`: I18nKey = "faq:enableAutoplayForSoundsA"
    val `enableAutoplayForSoundsChrome`: I18nKey = "faq:enableAutoplayForSoundsChrome"
    val `enableAutoplayForSoundsFirefox`: I18nKey = "faq:enableAutoplayForSoundsFirefox"
    val `enableAutoplayForSoundsMicrosoftEdge`: I18nKey = "faq:enableAutoplayForSoundsMicrosoftEdge"
    val `enableAutoplayForSoundsQ`: I18nKey = "faq:enableAutoplayForSoundsQ"
    val `enableAutoplayForSoundsSafari`: I18nKey = "faq:enableAutoplayForSoundsSafari"
    val `enableDisableNotificationPopUps`: I18nKey = "faq:enableDisableNotificationPopUps"
    val `enableZenMode`: I18nKey = "faq:enableZenMode"
    val `explainingEnPassant`: I18nKey = "faq:explainingEnPassant"
    val `fairPlay`: I18nKey = "faq:fairPlay"
    val `fairPlayPage`: I18nKey = "faq:fairPlayPage"
    val `faqAbbreviation`: I18nKey = "faq:faqAbbreviation"
    val `fewerLobbyPools`: I18nKey = "faq:fewerLobbyPools"
    val `fideHandbook`: I18nKey = "faq:fideHandbook"
    val `fideHandbookX`: I18nKey = "faq:fideHandbookX"
    val `findMoreAndSeeHowHelp`: I18nKey = "faq:findMoreAndSeeHowHelp"
    val `frequentlyAskedQuestions`: I18nKey = "faq:frequentlyAskedQuestions"
    val `gameplay`: I18nKey = "faq:gameplay"
    val `goldenZeeExplanation`: I18nKey = "faq:goldenZeeExplanation"
    val `goodIntroduction`: I18nKey = "faq:goodIntroduction"
    val `guidelines`: I18nKey = "faq:guidelines"
    val `havePlayedARatedGameAtLeastOneWeekAgo`: I18nKey = "faq:havePlayedARatedGameAtLeastOneWeekAgo"
    val `havePlayedMoreThanThirtyGamesInThatRating`: I18nKey = "faq:havePlayedMoreThanThirtyGamesInThatRating"
    val `hearItPronouncedBySpecialist`: I18nKey = "faq:hearItPronouncedBySpecialist"
    val `howBulletBlitzEtcDecided`: I18nKey = "faq:howBulletBlitzEtcDecided"
    val `howCanIBecomeModerator`: I18nKey = "faq:howCanIBecomeModerator"
    val `howCanIContributeToLichess`: I18nKey = "faq:howCanIContributeToLichess"
    val `howDoLeaderoardsWork`: I18nKey = "faq:howDoLeaderoardsWork"
    val `howToHideRatingWhilePlaying`: I18nKey = "faq:howToHideRatingWhilePlaying"
    val `howToThreeDots`: I18nKey = "faq:howToThreeDots"
    val `inferiorThanXsEqualYtimeControl`: I18nKey = "faq:inferiorThanXsEqualYtimeControl"
    val `inOrderToAppearsYouMust`: I18nKey = "faq:inOrderToAppearsYouMust"
    val `insufficientMaterial`: I18nKey = "faq:insufficientMaterial"
    val `isCorrespondenceDifferent`: I18nKey = "faq:isCorrespondenceDifferent"
    val `keyboardShortcuts`: I18nKey = "faq:keyboardShortcuts"
    val `keyboardShortcutsExplanation`: I18nKey = "faq:keyboardShortcutsExplanation"
    val `leavingGameWithoutResigningExplanation`: I18nKey = "faq:leavingGameWithoutResigningExplanation"
    val `leechess`: I18nKey = "faq:leechess"
    val `lichessCanOptionnalySendPopUps`: I18nKey = "faq:lichessCanOptionnalySendPopUps"
    val `lichessCombinationLiveLightLibrePronounced`: I18nKey = "faq:lichessCombinationLiveLightLibrePronounced"
    val `lichessFollowFIDErules`: I18nKey = "faq:lichessFollowFIDErules"
    val `lichessPoweredByDonationsAndVolunteers`: I18nKey = "faq:lichessPoweredByDonationsAndVolunteers"
    val `lichessRatings`: I18nKey = "faq:lichessRatings"
    val `lichessRecognizeAllOTBtitles`: I18nKey = "faq:lichessRecognizeAllOTBtitles"
    val `lichessSupportChessAnd`: I18nKey = "faq:lichessSupportChessAnd"
    val `lichessTraining`: I18nKey = "faq:lichessTraining"
    val `lichessUserstyles`: I18nKey = "faq:lichessUserstyles"
    val `lMtitleComesToYouDoNotRequestIt`: I18nKey = "faq:lMtitleComesToYouDoNotRequestIt"
    val `mentalHealthCondition`: I18nKey = "faq:mentalHealthCondition"
    val `notPlayedEnoughRatedGamesAgainstX`: I18nKey = "faq:notPlayedEnoughRatedGamesAgainstX"
    val `notPlayedRecently`: I18nKey = "faq:notPlayedRecently"
    val `notRepeatedMoves`: I18nKey = "faq:notRepeatedMoves"
    val `noUpperCaseDot`: I18nKey = "faq:noUpperCaseDot"
    val `otherWaysToHelp`: I18nKey = "faq:otherWaysToHelp"
    val `ownerUniqueTrophies`: I18nKey = "faq:ownerUniqueTrophies"
    val `pleaseReadFairPlayPage`: I18nKey = "faq:pleaseReadFairPlayPage"
    val `positions`: I18nKey = "faq:positions"
    val `preventLeavingGameWithoutResigning`: I18nKey = "faq:preventLeavingGameWithoutResigning"
    val `provisionalRatingExplanation`: I18nKey = "faq:provisionalRatingExplanation"
    val `ratingDeviationLowerThanXinChessYinVariants`: I18nKey = "faq:ratingDeviationLowerThanXinChessYinVariants"
    val `ratingDeviationMorethanOneHundredTen`: I18nKey = "faq:ratingDeviationMorethanOneHundredTen"
    val `ratingLeaderboards`: I18nKey = "faq:ratingLeaderboards"
    val `ratingRefundExplanation`: I18nKey = "faq:ratingRefundExplanation"
    val `ratingSystemUsedByLichess`: I18nKey = "faq:ratingSystemUsedByLichess"
    val `repeatedPositionsThatMatters`: I18nKey = "faq:repeatedPositionsThatMatters"
    val `secondRequirementToStopOldPlayersTrustingLeaderboards`: I18nKey = "faq:secondRequirementToStopOldPlayersTrustingLeaderboards"
    val `showYourTitle`: I18nKey = "faq:showYourTitle"
    val `similarOpponents`: I18nKey = "faq:similarOpponents"
    val `stopMyselfFromPlaying`: I18nKey = "faq:stopMyselfFromPlaying"
    val `superiorThanXsEqualYtimeControl`: I18nKey = "faq:superiorThanXsEqualYtimeControl"
    val `threeFoldHasToBeClaimed`: I18nKey = "faq:threeFoldHasToBeClaimed"
    val `threefoldRepetition`: I18nKey = "faq:threefoldRepetition"
    val `threefoldRepetitionExplanation`: I18nKey = "faq:threefoldRepetitionExplanation"
    val `threefoldRepetitionLowerCase`: I18nKey = "faq:threefoldRepetitionLowerCase"
    val `titlesAvailableOnLichess`: I18nKey = "faq:titlesAvailableOnLichess"
    val `uniqueTrophies`: I18nKey = "faq:uniqueTrophies"
    val `usernamesCannotBeChanged`: I18nKey = "faq:usernamesCannotBeChanged"
    val `usernamesNotOffensive`: I18nKey = "faq:usernamesNotOffensive"
    val `verificationForm`: I18nKey = "faq:verificationForm"
    val `viewSiteInformationPopUp`: I18nKey = "faq:viewSiteInformationPopUp"
    val `watchIMRosenCheckmate`: I18nKey = "faq:watchIMRosenCheckmate"
    val `wayOfBerserkExplanation`: I18nKey = "faq:wayOfBerserkExplanation"
    val `weCannotDoThatEvenIfItIsServerSideButThatsRare`: I18nKey = "faq:weCannotDoThatEvenIfItIsServerSideButThatsRare"
    val `weRepeatedthreeTimesPosButNoDraw`: I18nKey = "faq:weRepeatedthreeTimesPosButNoDraw"
    val `whatIsACPL`: I18nKey = "faq:whatIsACPL"
    val `whatIsProvisionalRating`: I18nKey = "faq:whatIsProvisionalRating"
    val `whatUsernameCanIchoose`: I18nKey = "faq:whatUsernameCanIchoose"
    val `whatVariantsCanIplay`: I18nKey = "faq:whatVariantsCanIplay"
    val `whenAmIEligibleRatinRefund`: I18nKey = "faq:whenAmIEligibleRatinRefund"
    val `whichRatingSystemUsedByLichess`: I18nKey = "faq:whichRatingSystemUsedByLichess"
    val `whyAreRatingHigher`: I18nKey = "faq:whyAreRatingHigher"
    val `whyAreRatingHigherExplanation`: I18nKey = "faq:whyAreRatingHigherExplanation"
    val `whyIsLichessCalledLichess`: I18nKey = "faq:whyIsLichessCalledLichess"
    val `whyIsLilaCalledLila`: I18nKey = "faq:whyIsLilaCalledLila"
    val `whyLiveLightLibre`: I18nKey = "faq:whyLiveLightLibre"
    val `yesLichessInspiredOtherOpenSourceWebsites`: I18nKey = "faq:yesLichessInspiredOtherOpenSourceWebsites"
    val `youCannotApply`: I18nKey = "faq:youCannotApply"
    val `youCanUseOpeningBookNoEngine`: I18nKey = "faq:youCanUseOpeningBookNoEngine"

  object features:
    val `allChessBasicsLessons`: I18nKey = "features:allChessBasicsLessons"
    val `allFeaturesAreFreeForEverybody`: I18nKey = "features:allFeaturesAreFreeForEverybody"
    val `allFeaturesToCome`: I18nKey = "features:allFeaturesToCome"
    val `boardEditorAndAnalysisBoardWithEngine`: I18nKey = "features:boardEditorAndAnalysisBoardWithEngine"
    val `chessInsights`: I18nKey = "features:chessInsights"
    val `cloudEngineAnalysis`: I18nKey = "features:cloudEngineAnalysis"
    val `contributeToLichessAndGetIcon`: I18nKey = "features:contributeToLichessAndGetIcon"
    val `correspondenceWithConditionalPremoves`: I18nKey = "features:correspondenceWithConditionalPremoves"
    val `deepXServerAnalysis`: I18nKey = "features:deepXServerAnalysis"
    val `downloadOrUploadAnyGameAsPgn`: I18nKey = "features:downloadOrUploadAnyGameAsPgn"
    val `endgameTablebase`: I18nKey = "features:endgameTablebase"
    val `everybodyGetsAllFeaturesForFree`: I18nKey = "features:everybodyGetsAllFeaturesForFree"
    val `gamesPerDay`: I18nKey = "features:gamesPerDay"
    val `globalOpeningExplorerInNbGames`: I18nKey = "features:globalOpeningExplorerInNbGames"
    val `ifYouLoveLichess`: I18nKey = "features:ifYouLoveLichess"
    val `landscapeSupportOnApp`: I18nKey = "features:landscapeSupportOnApp"
    val `lightOrDarkThemeCustomBoardsPiecesAndBackground`: I18nKey = "features:lightOrDarkThemeCustomBoardsPiecesAndBackground"
    val `personalOpeningExplorer`: I18nKey = "features:personalOpeningExplorer"
    val `personalOpeningExplorerX`: I18nKey = "features:personalOpeningExplorerX"
    val `standardChessAndX`: I18nKey = "features:standardChessAndX"
    val `studies`: I18nKey = "features:studies"
    val `supportLichess`: I18nKey = "features:supportLichess"
    val `supportUsWithAPatronAccount`: I18nKey = "features:supportUsWithAPatronAccount"
    val `tacticalPuzzlesFromUserGames`: I18nKey = "features:tacticalPuzzlesFromUserGames"
    val `tvForumBlogTeamsMessagingFriendsChallenges`: I18nKey = "features:tvForumBlogTeamsMessagingFriendsChallenges"
    val `ultraBulletBulletBlitzRapidClassicalAndCorrespondenceChess`: I18nKey = "features:ultraBulletBulletBlitzRapidClassicalAndCorrespondenceChess"
    val `weBelieveEveryChessPlayerDeservesTheBest`: I18nKey = "features:weBelieveEveryChessPlayerDeservesTheBest"
    val `zeroAdsAndNoTracking`: I18nKey = "features:zeroAdsAndNoTracking"

  object insight:
    val `cantSeeInsights`: I18nKey = "insight:cantSeeInsights"
    val `crunchingData`: I18nKey = "insight:crunchingData"
    val `generateInsights`: I18nKey = "insight:generateInsights"
    val `insightsAreProtected`: I18nKey = "insight:insightsAreProtected"
    val `insightsSettings`: I18nKey = "insight:insightsSettings"
    val `maybeAskThemToChangeTheir`: I18nKey = "insight:maybeAskThemToChangeTheir"
    val `xChessInsights`: I18nKey = "insight:xChessInsights"
    val `xHasNoChessInsights`: I18nKey = "insight:xHasNoChessInsights"

  object keyboardMove:
    val `bothTheLetterOAndTheDigitZero`: I18nKey = "keyboardMove:bothTheLetterOAndTheDigitZero"
    val `capitalizationOnlyMattersInAmbiguousSituations`: I18nKey = "keyboardMove:capitalizationOnlyMattersInAmbiguousSituations"
    val `dropARookAtB4`: I18nKey = "keyboardMove:dropARookAtB4"
    val `ifItIsLegalToCastleBothWays`: I18nKey = "keyboardMove:ifItIsLegalToCastleBothWays"
    val `ifTheAboveMoveNotationIsUnfamiliar`: I18nKey = "keyboardMove:ifTheAboveMoveNotationIsUnfamiliar"
    val `includingAXToIndicateACapture`: I18nKey = "keyboardMove:includingAXToIndicateACapture"
    val `keyboardInputCommands`: I18nKey = "keyboardMove:keyboardInputCommands"
    val `kingsideCastle`: I18nKey = "keyboardMove:kingsideCastle"
    val `moveKnightToC3`: I18nKey = "keyboardMove:moveKnightToC3"
    val `movePieceFromE2ToE4`: I18nKey = "keyboardMove:movePieceFromE2ToE4"
    val `offerOrAcceptDraw`: I18nKey = "keyboardMove:offerOrAcceptDraw"
    val `otherCommands`: I18nKey = "keyboardMove:otherCommands"
    val `performAMove`: I18nKey = "keyboardMove:performAMove"
    val `promoteC8ToQueen`: I18nKey = "keyboardMove:promoteC8ToQueen"
    val `queensideCastle`: I18nKey = "keyboardMove:queensideCastle"
    val `readOutClocks`: I18nKey = "keyboardMove:readOutClocks"
    val `readOutOpponentName`: I18nKey = "keyboardMove:readOutOpponentName"
    val `tips`: I18nKey = "keyboardMove:tips"
    val `toPremoveSimplyTypeTheDesiredPremove`: I18nKey = "keyboardMove:toPremoveSimplyTypeTheDesiredPremove"

  object lag:
    val `andNowTheLongAnswerLagComposedOfTwoValues`: I18nKey = "lag:andNowTheLongAnswerLagComposedOfTwoValues"
    val `isLichessLagging`: I18nKey = "lag:isLichessLagging"
    val `lagCompensation`: I18nKey = "lag:lagCompensation"
    val `lagCompensationExplanation`: I18nKey = "lag:lagCompensationExplanation"
    val `lichessServerLatency`: I18nKey = "lag:lichessServerLatency"
    val `lichessServerLatencyExplanation`: I18nKey = "lag:lichessServerLatencyExplanation"
    val `measurementInProgressThreeDot`: I18nKey = "lag:measurementInProgressThreeDot"
    val `networkBetweenLichessAndYou`: I18nKey = "lag:networkBetweenLichessAndYou"
    val `networkBetweenLichessAndYouExplanation`: I18nKey = "lag:networkBetweenLichessAndYouExplanation"
    val `noAndYourNetworkIsBad`: I18nKey = "lag:noAndYourNetworkIsBad"
    val `noAndYourNetworkIsGood`: I18nKey = "lag:noAndYourNetworkIsGood"
    val `yesItWillBeFixedSoon`: I18nKey = "lag:yesItWillBeFixedSoon"
    val `youCanFindTheseValuesAtAnyTimeByClickingOnYourUsername`: I18nKey = "lag:youCanFindTheseValuesAtAnyTimeByClickingOnYourUsername"

  object learn:
    val `advanced`: I18nKey = "learn:advanced"
    val `aPawnOnTheSecondRank`: I18nKey = "learn:aPawnOnTheSecondRank"
    val `attackTheOpponentsKing`: I18nKey = "learn:attackTheOpponentsKing"
    val `attackYourOpponentsKing`: I18nKey = "learn:attackYourOpponentsKing"
    val `awesome`: I18nKey = "learn:awesome"
    val `backToMenu`: I18nKey = "learn:backToMenu"
    val `bishopComplete`: I18nKey = "learn:bishopComplete"
    val `bishopIntro`: I18nKey = "learn:bishopIntro"
    val `blackJustMovedThePawnByTwoSquares`: I18nKey = "learn:blackJustMovedThePawnByTwoSquares"
    val `boardSetup`: I18nKey = "learn:boardSetup"
    val `boardSetupComplete`: I18nKey = "learn:boardSetupComplete"
    val `boardSetupIntro`: I18nKey = "learn:boardSetupIntro"
    val `byPlaying`: I18nKey = "learn:byPlaying"
    val `capture`: I18nKey = "learn:capture"
    val `captureAndDefendPieces`: I18nKey = "learn:captureAndDefendPieces"
    val `captureComplete`: I18nKey = "learn:captureComplete"
    val `captureIntro`: I18nKey = "learn:captureIntro"
    val `captureThenPromote`: I18nKey = "learn:captureThenPromote"
    val `castleKingSide`: I18nKey = "learn:castleKingSide"
    val `castleKingSideMovePiecesFirst`: I18nKey = "learn:castleKingSideMovePiecesFirst"
    val `castleQueenSide`: I18nKey = "learn:castleQueenSide"
    val `castleQueenSideMovePiecesFirst`: I18nKey = "learn:castleQueenSideMovePiecesFirst"
    val `castling`: I18nKey = "learn:castling"
    val `castlingComplete`: I18nKey = "learn:castlingComplete"
    val `castlingIntro`: I18nKey = "learn:castlingIntro"
    val `checkInOne`: I18nKey = "learn:checkInOne"
    val `checkInOneComplete`: I18nKey = "learn:checkInOneComplete"
    val `checkInOneGoal`: I18nKey = "learn:checkInOneGoal"
    val `checkInOneIntro`: I18nKey = "learn:checkInOneIntro"
    val `checkInTwo`: I18nKey = "learn:checkInTwo"
    val `checkInTwoComplete`: I18nKey = "learn:checkInTwoComplete"
    val `checkInTwoGoal`: I18nKey = "learn:checkInTwoGoal"
    val `checkInTwoIntro`: I18nKey = "learn:checkInTwoIntro"
    val `chessPieces`: I18nKey = "learn:chessPieces"
    val `combat`: I18nKey = "learn:combat"
    val `combatComplete`: I18nKey = "learn:combatComplete"
    val `combatIntro`: I18nKey = "learn:combatIntro"
    val `defeatTheOpponentsKing`: I18nKey = "learn:defeatTheOpponentsKing"
    val `defendYourKing`: I18nKey = "learn:defendYourKing"
    val `dontLetThemTakeAnyUndefendedPiece`: I18nKey = "learn:dontLetThemTakeAnyUndefendedPiece"
    val `enPassant`: I18nKey = "learn:enPassant"
    val `enPassantComplete`: I18nKey = "learn:enPassantComplete"
    val `enPassantIntro`: I18nKey = "learn:enPassantIntro"
    val `enPassantOnlyWorksImmediately`: I18nKey = "learn:enPassantOnlyWorksImmediately"
    val `enPassantOnlyWorksOnFifthRank`: I18nKey = "learn:enPassantOnlyWorksOnFifthRank"
    val `escape`: I18nKey = "learn:escape"
    val `escapeOrBlock`: I18nKey = "learn:escapeOrBlock"
    val `escapeWithTheKing`: I18nKey = "learn:escapeWithTheKing"
    val `evaluatePieceStrength`: I18nKey = "learn:evaluatePieceStrength"
    val `excellent`: I18nKey = "learn:excellent"
    val `exerciseYourTacticalSkills`: I18nKey = "learn:exerciseYourTacticalSkills"
    val `findAWayToCastleKingSide`: I18nKey = "learn:findAWayToCastleKingSide"
    val `findAWayToCastleQueenSide`: I18nKey = "learn:findAWayToCastleQueenSide"
    val `firstPlaceTheRooks`: I18nKey = "learn:firstPlaceTheRooks"
    val `fundamentals`: I18nKey = "learn:fundamentals"
    val `getAFreeLichessAccount`: I18nKey = "learn:getAFreeLichessAccount"
    val `grabAllTheStars`: I18nKey = "learn:grabAllTheStars"
    val `grabAllTheStarsNoNeedToPromote`: I18nKey = "learn:grabAllTheStarsNoNeedToPromote"
    val `greatJob`: I18nKey = "learn:greatJob"
    val `howTheGameStarts`: I18nKey = "learn:howTheGameStarts"
    val `intermediate`: I18nKey = "learn:intermediate"
    val `itMovesDiagonally`: I18nKey = "learn:itMovesDiagonally"
    val `itMovesForwardOnly`: I18nKey = "learn:itMovesForwardOnly"
    val `itMovesInAnLShape`: I18nKey = "learn:itMovesInAnLShape"
    val `itMovesInStraightLines`: I18nKey = "learn:itMovesInStraightLines"
    val `itNowPromotesToAStrongerPiece`: I18nKey = "learn:itNowPromotesToAStrongerPiece"
    val `keepYourPiecesSafe`: I18nKey = "learn:keepYourPiecesSafe"
    val `kingComplete`: I18nKey = "learn:kingComplete"
    val `kingIntro`: I18nKey = "learn:kingIntro"
    val `knightComplete`: I18nKey = "learn:knightComplete"
    val `knightIntro`: I18nKey = "learn:knightIntro"
    val `knightsCanJumpOverObstacles`: I18nKey = "learn:knightsCanJumpOverObstacles"
    val `knightsHaveAFancyWay`: I18nKey = "learn:knightsHaveAFancyWay"
    val `lastOne`: I18nKey = "learn:lastOne"
    val `learnChess`: I18nKey = "learn:learnChess"
    val `learnCommonChessPositions`: I18nKey = "learn:learnCommonChessPositions"
    val `letsGo`: I18nKey = "learn:letsGo"
    val `mateInOne`: I18nKey = "learn:mateInOne"
    val `mateInOneComplete`: I18nKey = "learn:mateInOneComplete"
    val `mateInOneIntro`: I18nKey = "learn:mateInOneIntro"
    val `menu`: I18nKey = "learn:menu"
    val `mostOfTheTimePromotingToAQueenIsBest`: I18nKey = "learn:mostOfTheTimePromotingToAQueenIsBest"
    val `nailedIt`: I18nKey = "learn:nailedIt"
    val `next`: I18nKey = "learn:next"
    val `nextX`: I18nKey = "learn:nextX"
    val `noEscape`: I18nKey = "learn:noEscape"
    val `opponentsFromAroundTheWorld`: I18nKey = "learn:opponentsFromAroundTheWorld"
    val `outOfCheck`: I18nKey = "learn:outOfCheck"
    val `outOfCheckComplete`: I18nKey = "learn:outOfCheckComplete"
    val `outOfCheckIntro`: I18nKey = "learn:outOfCheckIntro"
    val `outstanding`: I18nKey = "learn:outstanding"
    val `pawnComplete`: I18nKey = "learn:pawnComplete"
    val `pawnIntro`: I18nKey = "learn:pawnIntro"
    val `pawnPromotion`: I18nKey = "learn:pawnPromotion"
    val `pawnsFormTheFrontLine`: I18nKey = "learn:pawnsFormTheFrontLine"
    val `pawnsMoveForward`: I18nKey = "learn:pawnsMoveForward"
    val `pawnsMoveOneSquareOnly`: I18nKey = "learn:pawnsMoveOneSquareOnly"
    val `perfect`: I18nKey = "learn:perfect"
    val `pieceValue`: I18nKey = "learn:pieceValue"
    val `pieceValueComplete`: I18nKey = "learn:pieceValueComplete"
    val `pieceValueExchange`: I18nKey = "learn:pieceValueExchange"
    val `pieceValueIntro`: I18nKey = "learn:pieceValueIntro"
    val `pieceValueLegal`: I18nKey = "learn:pieceValueLegal"
    val `placeTheBishops`: I18nKey = "learn:placeTheBishops"
    val `placeTheKing`: I18nKey = "learn:placeTheKing"
    val `placeTheQueen`: I18nKey = "learn:placeTheQueen"
    val `play`: I18nKey = "learn:play"
    val `playMachine`: I18nKey = "learn:playMachine"
    val `playPeople`: I18nKey = "learn:playPeople"
    val `practice`: I18nKey = "learn:practice"
    val `progressX`: I18nKey = "learn:progressX"
    val `protection`: I18nKey = "learn:protection"
    val `protectionComplete`: I18nKey = "learn:protectionComplete"
    val `protectionIntro`: I18nKey = "learn:protectionIntro"
    val `puzzleFailed`: I18nKey = "learn:puzzleFailed"
    val `puzzles`: I18nKey = "learn:puzzles"
    val `queenCombinesRookAndBishop`: I18nKey = "learn:queenCombinesRookAndBishop"
    val `queenComplete`: I18nKey = "learn:queenComplete"
    val `queenIntro`: I18nKey = "learn:queenIntro"
    val `queenOverBishop`: I18nKey = "learn:queenOverBishop"
    val `register`: I18nKey = "learn:register"
    val `resetMyProgress`: I18nKey = "learn:resetMyProgress"
    val `retry`: I18nKey = "learn:retry"
    val `rightOn`: I18nKey = "learn:rightOn"
    val `rookComplete`: I18nKey = "learn:rookComplete"
    val `rookGoal`: I18nKey = "learn:rookGoal"
    val `rookIntro`: I18nKey = "learn:rookIntro"
    val `selectThePieceYouWant`: I18nKey = "learn:selectThePieceYouWant"
    val `stageX`: I18nKey = "learn:stageX"
    val `stageXComplete`: I18nKey = "learn:stageXComplete"
    val `stalemate`: I18nKey = "learn:stalemate"
    val `stalemateComplete`: I18nKey = "learn:stalemateComplete"
    val `stalemateGoal`: I18nKey = "learn:stalemateGoal"
    val `stalemateIntro`: I18nKey = "learn:stalemateIntro"
    val `takeAllThePawnsEnPassant`: I18nKey = "learn:takeAllThePawnsEnPassant"
    val `takeTheBlackPieces`: I18nKey = "learn:takeTheBlackPieces"
    val `takeTheBlackPiecesAndDontLoseYours`: I18nKey = "learn:takeTheBlackPiecesAndDontLoseYours"
    val `takeTheEnemyPieces`: I18nKey = "learn:takeTheEnemyPieces"
    val `takeThePieceWithTheHighestValue`: I18nKey = "learn:takeThePieceWithTheHighestValue"
    val `testYourSkillsWithTheComputer`: I18nKey = "learn:testYourSkillsWithTheComputer"
    val `theBishop`: I18nKey = "learn:theBishop"
    val `theFewerMoves`: I18nKey = "learn:theFewerMoves"
    val `theGameIsADraw`: I18nKey = "learn:theGameIsADraw"
    val `theKing`: I18nKey = "learn:theKing"
    val `theKingCannotEscapeButBlock`: I18nKey = "learn:theKingCannotEscapeButBlock"
    val `theKingIsSlow`: I18nKey = "learn:theKingIsSlow"
    val `theKnight`: I18nKey = "learn:theKnight"
    val `theKnightIsInTheWay`: I18nKey = "learn:theKnightIsInTheWay"
    val `theMostImportantPiece`: I18nKey = "learn:theMostImportantPiece"
    val `thenPlaceTheKnights`: I18nKey = "learn:thenPlaceTheKnights"
    val `thePawn`: I18nKey = "learn:thePawn"
    val `theQueen`: I18nKey = "learn:theQueen"
    val `theRook`: I18nKey = "learn:theRook"
    val `theSpecialKingMove`: I18nKey = "learn:theSpecialKingMove"
    val `theSpecialPawnMove`: I18nKey = "learn:theSpecialPawnMove"
    val `thisIsTheInitialPosition`: I18nKey = "learn:thisIsTheInitialPosition"
    val `thisKnightIsCheckingThroughYourDefenses`: I18nKey = "learn:thisKnightIsCheckingThroughYourDefenses"
    val `twoMovesToGiveCheck`: I18nKey = "learn:twoMovesToGiveCheck"
    val `useAllThePawns`: I18nKey = "learn:useAllThePawns"
    val `useTwoRooks`: I18nKey = "learn:useTwoRooks"
    val `videos`: I18nKey = "learn:videos"
    val `watchInstructiveChessVideos`: I18nKey = "learn:watchInstructiveChessVideos"
    val `wayToGo`: I18nKey = "learn:wayToGo"
    val `whatNext`: I18nKey = "learn:whatNext"
    val `yesYesYes`: I18nKey = "learn:yesYesYes"
    val `youCanGetOutOfCheckByTaking`: I18nKey = "learn:youCanGetOutOfCheckByTaking"
    val `youCannotCastleIfAttacked`: I18nKey = "learn:youCannotCastleIfAttacked"
    val `youCannotCastleIfMoved`: I18nKey = "learn:youCannotCastleIfMoved"
    val `youKnowHowToPlayChess`: I18nKey = "learn:youKnowHowToPlayChess"
    val `youNeedBothBishops`: I18nKey = "learn:youNeedBothBishops"
    val `youreGoodAtThis`: I18nKey = "learn:youreGoodAtThis"
    val `yourPawnReachedTheEndOfTheBoard`: I18nKey = "learn:yourPawnReachedTheEndOfTheBoard"
    val `youWillLoseAllYourProgress`: I18nKey = "learn:youWillLoseAllYourProgress"

  object oauthScope:
    val `alreadyHavePlayedGames`: I18nKey = "oauthScope:alreadyHavePlayedGames"
    val `apiAccessTokens`: I18nKey = "oauthScope:apiAccessTokens"
    val `apiDocumentation`: I18nKey = "oauthScope:apiDocumentation"
    val `apiDocumentationLinks`: I18nKey = "oauthScope:apiDocumentationLinks"
    val `attentionOfDevelopers`: I18nKey = "oauthScope:attentionOfDevelopers"
    val `authorizationCodeFlow`: I18nKey = "oauthScope:authorizationCodeFlow"
    val `boardPlay`: I18nKey = "oauthScope:boardPlay"
    val `botPlay`: I18nKey = "oauthScope:botPlay"
    val `canMakeOauthRequests`: I18nKey = "oauthScope:canMakeOauthRequests"
    val `carefullySelect`: I18nKey = "oauthScope:carefullySelect"
    val `challengeBulk`: I18nKey = "oauthScope:challengeBulk"
    val `challengeRead`: I18nKey = "oauthScope:challengeRead"
    val `challengeWrite`: I18nKey = "oauthScope:challengeWrite"
    val `copyTokenNow`: I18nKey = "oauthScope:copyTokenNow"
    val `created`: I18nKey = "oauthScope:created"
    val `doNotShareIt`: I18nKey = "oauthScope:doNotShareIt"
    val `emailRead`: I18nKey = "oauthScope:emailRead"
    val `engineRead`: I18nKey = "oauthScope:engineRead"
    val `engineWrite`: I18nKey = "oauthScope:engineWrite"
    val `followRead`: I18nKey = "oauthScope:followRead"
    val `followWrite`: I18nKey = "oauthScope:followWrite"
    val `forExample`: I18nKey = "oauthScope:forExample"
    val `generatePersonalToken`: I18nKey = "oauthScope:generatePersonalToken"
    val `givingPrefilledUrls`: I18nKey = "oauthScope:givingPrefilledUrls"
    val `guardTokensCarefully`: I18nKey = "oauthScope:guardTokensCarefully"
    val `insteadGenerateToken`: I18nKey = "oauthScope:insteadGenerateToken"
    val `lastUsed`: I18nKey = "oauthScope:lastUsed"
    val `msgWrite`: I18nKey = "oauthScope:msgWrite"
    val `newAccessToken`: I18nKey = "oauthScope:newAccessToken"
    val `newToken`: I18nKey = "oauthScope:newToken"
    val `personalAccessTokens`: I18nKey = "oauthScope:personalAccessTokens"
    val `personalTokenAppExample`: I18nKey = "oauthScope:personalTokenAppExample"
    val `possibleToPrefill`: I18nKey = "oauthScope:possibleToPrefill"
    val `preferenceRead`: I18nKey = "oauthScope:preferenceRead"
    val `preferenceWrite`: I18nKey = "oauthScope:preferenceWrite"
    val `puzzleRead`: I18nKey = "oauthScope:puzzleRead"
    val `racerWrite`: I18nKey = "oauthScope:racerWrite"
    val `rememberTokenUse`: I18nKey = "oauthScope:rememberTokenUse"
    val `scopesCanBeFound`: I18nKey = "oauthScope:scopesCanBeFound"
    val `studyRead`: I18nKey = "oauthScope:studyRead"
    val `studyWrite`: I18nKey = "oauthScope:studyWrite"
    val `teamLead`: I18nKey = "oauthScope:teamLead"
    val `teamRead`: I18nKey = "oauthScope:teamRead"
    val `teamWrite`: I18nKey = "oauthScope:teamWrite"
    val `ticksTheScopes`: I18nKey = "oauthScope:ticksTheScopes"
    val `tokenDescription`: I18nKey = "oauthScope:tokenDescription"
    val `tokenGrantsPermission`: I18nKey = "oauthScope:tokenGrantsPermission"
    val `tournamentWrite`: I18nKey = "oauthScope:tournamentWrite"
    val `webLogin`: I18nKey = "oauthScope:webLogin"
    val `webMod`: I18nKey = "oauthScope:webMod"
    val `whatTheTokenCanDo`: I18nKey = "oauthScope:whatTheTokenCanDo"

  object onboarding:
    val `configureLichess`: I18nKey = "onboarding:configureLichess"
    val `enabledKidModeSuggestion`: I18nKey = "onboarding:enabledKidModeSuggestion"
    val `exploreTheSiteAndHaveFun`: I18nKey = "onboarding:exploreTheSiteAndHaveFun"
    val `followYourFriendsOnLichess`: I18nKey = "onboarding:followYourFriendsOnLichess"
    val `improveWithChessTacticsPuzzles`: I18nKey = "onboarding:improveWithChessTacticsPuzzles"
    val `learnChessRules`: I18nKey = "onboarding:learnChessRules"
    val `learnFromXAndY`: I18nKey = "onboarding:learnFromXAndY"
    val `playInTournaments`: I18nKey = "onboarding:playInTournaments"
    val `playOpponentsFromAroundTheWorld`: I18nKey = "onboarding:playOpponentsFromAroundTheWorld"
    val `playTheArtificialIntelligence`: I18nKey = "onboarding:playTheArtificialIntelligence"
    val `thisIsYourProfilePage`: I18nKey = "onboarding:thisIsYourProfilePage"
    val `welcome`: I18nKey = "onboarding:welcome"
    val `welcomeToLichess`: I18nKey = "onboarding:welcomeToLichess"
    val `whatNowSuggestions`: I18nKey = "onboarding:whatNowSuggestions"

  object patron:
    val `actOfCreation`: I18nKey = "patron:actOfCreation"
    val `amount`: I18nKey = "patron:amount"
    val `bankTransfers`: I18nKey = "patron:bankTransfers"
    val `becomePatron`: I18nKey = "patron:becomePatron"
    val `cancelSupport`: I18nKey = "patron:cancelSupport"
    val `celebratedPatrons`: I18nKey = "patron:celebratedPatrons"
    val `changeCurrency`: I18nKey = "patron:changeCurrency"
    val `changeMonthlyAmount`: I18nKey = "patron:changeMonthlyAmount"
    val `changeMonthlySupport`: I18nKey = "patron:changeMonthlySupport"
    val `changeOrContact`: I18nKey = "patron:changeOrContact"
    val `checkOutProfile`: I18nKey = "patron:checkOutProfile"
    val `contactSupport`: I18nKey = "patron:contactSupport"
    val `costBreakdown`: I18nKey = "patron:costBreakdown"
    val `currentStatus`: I18nKey = "patron:currentStatus"
    val `date`: I18nKey = "patron:date"
    val `decideHowMuch`: I18nKey = "patron:decideHowMuch"
    val `donate`: I18nKey = "patron:donate"
    val `donateAsX`: I18nKey = "patron:donateAsX"
    val `downgradeNextMonth`: I18nKey = "patron:downgradeNextMonth"
    val `featuresComparison`: I18nKey = "patron:featuresComparison"
    val `freeAccount`: I18nKey = "patron:freeAccount"
    val `freeChess`: I18nKey = "patron:freeChess"
    val `giftPatronWings`: I18nKey = "patron:giftPatronWings"
    val `giftPatronWingsShort`: I18nKey = "patron:giftPatronWingsShort"
    val `ifNotRenewedThenAccountWillRevert`: I18nKey = "patron:ifNotRenewedThenAccountWillRevert"
    val `lichessIsRegisteredWith`: I18nKey = "patron:lichessIsRegisteredWith"
    val `lichessPatron`: I18nKey = "patron:lichessPatron"
    val `lifetime`: I18nKey = "patron:lifetime"
    val `lifetimePatron`: I18nKey = "patron:lifetimePatron"
    val `logInToDonate`: I18nKey = "patron:logInToDonate"
    val `makeAdditionalDonation`: I18nKey = "patron:makeAdditionalDonation"
    val `monthly`: I18nKey = "patron:monthly"
    val `newPatrons`: I18nKey = "patron:newPatrons"
    val `nextPayment`: I18nKey = "patron:nextPayment"
    val `noAdsNoSubs`: I18nKey = "patron:noAdsNoSubs"
    val `noLongerSupport`: I18nKey = "patron:noLongerSupport"
    val `noPatronFeatures`: I18nKey = "patron:noPatronFeatures"
    val `nowLifetime`: I18nKey = "patron:nowLifetime"
    val `nowOneMonth`: I18nKey = "patron:nowOneMonth"
    val `officialNonProfit`: I18nKey = "patron:officialNonProfit"
    val `onetime`: I18nKey = "patron:onetime"
    val `onlyDonationFromAbove`: I18nKey = "patron:onlyDonationFromAbove"
    val `otherAmount`: I18nKey = "patron:otherAmount"
    val `otherMethods`: I18nKey = "patron:otherMethods"
    val `patronFeatures`: I18nKey = "patron:patronFeatures"
    val `patronForMonths`: I18nKey = "patron:patronForMonths"
    val `patronUntil`: I18nKey = "patron:patronUntil"
    val `payLifetimeOnce`: I18nKey = "patron:payLifetimeOnce"
    val `paymentDetails`: I18nKey = "patron:paymentDetails"
    val `permanentPatron`: I18nKey = "patron:permanentPatron"
    val `pleaseEnterAmountInX`: I18nKey = "patron:pleaseEnterAmountInX"
    val `recurringBilling`: I18nKey = "patron:recurringBilling"
    val `serversAndDeveloper`: I18nKey = "patron:serversAndDeveloper"
    val `singleDonation`: I18nKey = "patron:singleDonation"
    val `stopPayments`: I18nKey = "patron:stopPayments"
    val `stopPaymentsPayPal`: I18nKey = "patron:stopPaymentsPayPal"
    val `stripeManageSub`: I18nKey = "patron:stripeManageSub"
    val `thankYou`: I18nKey = "patron:thankYou"
    val `transactionCompleted`: I18nKey = "patron:transactionCompleted"
    val `tyvm`: I18nKey = "patron:tyvm"
    val `update`: I18nKey = "patron:update"
    val `updatePaymentMethod`: I18nKey = "patron:updatePaymentMethod"
    val `viewOthers`: I18nKey = "patron:viewOthers"
    val `weAreNonProfit`: I18nKey = "patron:weAreNonProfit"
    val `weAreSmallTeam`: I18nKey = "patron:weAreSmallTeam"
    val `weRelyOnSupport`: I18nKey = "patron:weRelyOnSupport"
    val `whereMoneyGoes`: I18nKey = "patron:whereMoneyGoes"
    val `withCreditCard`: I18nKey = "patron:withCreditCard"
    val `xBecamePatron`: I18nKey = "patron:xBecamePatron"
    val `xIsPatronForNbMonths`: I18nKey = "patron:xIsPatronForNbMonths"
    val `xOrY`: I18nKey = "patron:xOrY"
    val `youHaveLifetime`: I18nKey = "patron:youHaveLifetime"
    val `youSupportWith`: I18nKey = "patron:youSupportWith"
    val `youWillBeChargedXOnY`: I18nKey = "patron:youWillBeChargedXOnY"

  object perfStat:
    val `averageOpponent`: I18nKey = "perfStat:averageOpponent"
    val `berserkedGames`: I18nKey = "perfStat:berserkedGames"
    val `bestRated`: I18nKey = "perfStat:bestRated"
    val `currentStreak`: I18nKey = "perfStat:currentStreak"
    val `defeats`: I18nKey = "perfStat:defeats"
    val `disconnections`: I18nKey = "perfStat:disconnections"
    val `fromXToY`: I18nKey = "perfStat:fromXToY"
    val `gamesInARow`: I18nKey = "perfStat:gamesInARow"
    val `highestRating`: I18nKey = "perfStat:highestRating"
    val `lessThanOneHour`: I18nKey = "perfStat:lessThanOneHour"
    val `longestStreak`: I18nKey = "perfStat:longestStreak"
    val `losingStreak`: I18nKey = "perfStat:losingStreak"
    val `lowestRating`: I18nKey = "perfStat:lowestRating"
    val `maxTimePlaying`: I18nKey = "perfStat:maxTimePlaying"
    val `notEnoughGames`: I18nKey = "perfStat:notEnoughGames"
    val `notEnoughRatedGames`: I18nKey = "perfStat:notEnoughRatedGames"
    val `now`: I18nKey = "perfStat:now"
    val `perfStats`: I18nKey = "perfStat:perfStats"
    val `progressOverLastXGames`: I18nKey = "perfStat:progressOverLastXGames"
    val `provisional`: I18nKey = "perfStat:provisional"
    val `ratedGames`: I18nKey = "perfStat:ratedGames"
    val `ratingDeviation`: I18nKey = "perfStat:ratingDeviation"
    val `ratingDeviationTooltip`: I18nKey = "perfStat:ratingDeviationTooltip"
    val `timeSpentPlaying`: I18nKey = "perfStat:timeSpentPlaying"
    val `totalGames`: I18nKey = "perfStat:totalGames"
    val `tournamentGames`: I18nKey = "perfStat:tournamentGames"
    val `victories`: I18nKey = "perfStat:victories"
    val `viewTheGames`: I18nKey = "perfStat:viewTheGames"
    val `winningStreak`: I18nKey = "perfStat:winningStreak"

  object preferences:
    val `bellNotificationSound`: I18nKey = "preferences:bellNotificationSound"
    val `boardCoordinates`: I18nKey = "preferences:boardCoordinates"
    val `boardHighlights`: I18nKey = "preferences:boardHighlights"
    val `bothClicksAndDrag`: I18nKey = "preferences:bothClicksAndDrag"
    val `castleByMovingOntoTheRook`: I18nKey = "preferences:castleByMovingOntoTheRook"
    val `castleByMovingTheKingTwoSquaresOrOntoTheRook`: I18nKey = "preferences:castleByMovingTheKingTwoSquaresOrOntoTheRook"
    val `castleByMovingTwoSquares`: I18nKey = "preferences:castleByMovingTwoSquares"
    val `chessClock`: I18nKey = "preferences:chessClock"
    val `chessPieceSymbol`: I18nKey = "preferences:chessPieceSymbol"
    val `claimDrawOnThreefoldRepetitionAutomatically`: I18nKey = "preferences:claimDrawOnThreefoldRepetitionAutomatically"
    val `clickTwoSquares`: I18nKey = "preferences:clickTwoSquares"
    val `confirmResignationAndDrawOffers`: I18nKey = "preferences:confirmResignationAndDrawOffers"
    val `correspondenceAndUnlimited`: I18nKey = "preferences:correspondenceAndUnlimited"
    val `correspondenceEmailNotification`: I18nKey = "preferences:correspondenceEmailNotification"
    val `display`: I18nKey = "preferences:display"
    val `displayBoardResizeHandle`: I18nKey = "preferences:displayBoardResizeHandle"
    val `dragPiece`: I18nKey = "preferences:dragPiece"
    val `explainCanThenBeTemporarilyDisabled`: I18nKey = "preferences:explainCanThenBeTemporarilyDisabled"
    val `explainPromoteToQueenAutomatically`: I18nKey = "preferences:explainPromoteToQueenAutomatically"
    val `explainShowPlayerRatings`: I18nKey = "preferences:explainShowPlayerRatings"
    val `gameBehavior`: I18nKey = "preferences:gameBehavior"
    val `giveMoreTime`: I18nKey = "preferences:giveMoreTime"
    val `horizontalGreenProgressBars`: I18nKey = "preferences:horizontalGreenProgressBars"
    val `howDoYouMovePieces`: I18nKey = "preferences:howDoYouMovePieces"
    val `inCasualGamesOnly`: I18nKey = "preferences:inCasualGamesOnly"
    val `inCorrespondenceGames`: I18nKey = "preferences:inCorrespondenceGames"
    val `inGameOnly`: I18nKey = "preferences:inGameOnly"
    val `inputMovesWithTheKeyboard`: I18nKey = "preferences:inputMovesWithTheKeyboard"
    val `inputMovesWithVoice`: I18nKey = "preferences:inputMovesWithVoice"
    val `materialDifference`: I18nKey = "preferences:materialDifference"
    val `moveConfirmation`: I18nKey = "preferences:moveConfirmation"
    val `moveListWhilePlaying`: I18nKey = "preferences:moveListWhilePlaying"
    val `notifications`: I18nKey = "preferences:notifications"
    val `notifyBell`: I18nKey = "preferences:notifyBell"
    val `notifyChallenge`: I18nKey = "preferences:notifyChallenge"
    val `notifyDevice`: I18nKey = "preferences:notifyDevice"
    val `notifyForumMention`: I18nKey = "preferences:notifyForumMention"
    val `notifyGameEvent`: I18nKey = "preferences:notifyGameEvent"
    val `notifyInboxMsg`: I18nKey = "preferences:notifyInboxMsg"
    val `notifyInvitedStudy`: I18nKey = "preferences:notifyInvitedStudy"
    val `notifyPush`: I18nKey = "preferences:notifyPush"
    val `notifyStreamStart`: I18nKey = "preferences:notifyStreamStart"
    val `notifyTimeAlarm`: I18nKey = "preferences:notifyTimeAlarm"
    val `notifyTournamentSoon`: I18nKey = "preferences:notifyTournamentSoon"
    val `notifyWeb`: I18nKey = "preferences:notifyWeb"
    val `onlyOnInitialPosition`: I18nKey = "preferences:onlyOnInitialPosition"
    val `pgnLetter`: I18nKey = "preferences:pgnLetter"
    val `pgnPieceNotation`: I18nKey = "preferences:pgnPieceNotation"
    val `pieceAnimation`: I18nKey = "preferences:pieceAnimation"
    val `pieceDestinations`: I18nKey = "preferences:pieceDestinations"
    val `preferences`: I18nKey = "preferences:preferences"
    val `premovesPlayingDuringOpponentTurn`: I18nKey = "preferences:premovesPlayingDuringOpponentTurn"
    val `privacy`: I18nKey = "preferences:privacy"
    val `promoteToQueenAutomatically`: I18nKey = "preferences:promoteToQueenAutomatically"
    val `sayGgWpAfterLosingOrDrawing`: I18nKey = "preferences:sayGgWpAfterLosingOrDrawing"
    val `scrollOnTheBoardToReplayMoves`: I18nKey = "preferences:scrollOnTheBoardToReplayMoves"
    val `showFlairs`: I18nKey = "preferences:showFlairs"
    val `showPlayerRatings`: I18nKey = "preferences:showPlayerRatings"
    val `snapArrowsToValidMoves`: I18nKey = "preferences:snapArrowsToValidMoves"
    val `soundWhenTimeGetsCritical`: I18nKey = "preferences:soundWhenTimeGetsCritical"
    val `takebacksWithOpponentApproval`: I18nKey = "preferences:takebacksWithOpponentApproval"
    val `tenthsOfSeconds`: I18nKey = "preferences:tenthsOfSeconds"
    val `whenPremoving`: I18nKey = "preferences:whenPremoving"
    val `whenTimeRemainingLessThanTenSeconds`: I18nKey = "preferences:whenTimeRemainingLessThanTenSeconds"
    val `whenTimeRemainingLessThanThirtySeconds`: I18nKey = "preferences:whenTimeRemainingLessThanThirtySeconds"
    val `yourPreferencesHaveBeenSaved`: I18nKey = "preferences:yourPreferencesHaveBeenSaved"
    val `zenMode`: I18nKey = "preferences:zenMode"

  object puzzle:
    val `addAnotherTheme`: I18nKey = "puzzle:addAnotherTheme"
    val `advanced`: I18nKey = "puzzle:advanced"
    val `bestMove`: I18nKey = "puzzle:bestMove"
    val `byOpenings`: I18nKey = "puzzle:byOpenings"
    val `clickToSolve`: I18nKey = "puzzle:clickToSolve"
    val `continueTheStreak`: I18nKey = "puzzle:continueTheStreak"
    val `continueTraining`: I18nKey = "puzzle:continueTraining"
    val `dailyPuzzle`: I18nKey = "puzzle:dailyPuzzle"
    val `didYouLikeThisPuzzle`: I18nKey = "puzzle:didYouLikeThisPuzzle"
    val `difficultyLevel`: I18nKey = "puzzle:difficultyLevel"
    val `downVote`: I18nKey = "puzzle:downVote"
    val `easier`: I18nKey = "puzzle:easier"
    val `easiest`: I18nKey = "puzzle:easiest"
    val `example`: I18nKey = "puzzle:example"
    val `failed`: I18nKey = "puzzle:failed"
    val `findTheBestMoveForBlack`: I18nKey = "puzzle:findTheBestMoveForBlack"
    val `findTheBestMoveForWhite`: I18nKey = "puzzle:findTheBestMoveForWhite"
    val `fromGameLink`: I18nKey = "puzzle:fromGameLink"
    val `fromMyGames`: I18nKey = "puzzle:fromMyGames"
    val `fromMyGamesNone`: I18nKey = "puzzle:fromMyGamesNone"
    val `fromXGames`: I18nKey = "puzzle:fromXGames"
    val `fromXGamesFound`: I18nKey = "puzzle:fromXGamesFound"
    val `goals`: I18nKey = "puzzle:goals"
    val `goodMove`: I18nKey = "puzzle:goodMove"
    val `harder`: I18nKey = "puzzle:harder"
    val `hardest`: I18nKey = "puzzle:hardest"
    val `hidden`: I18nKey = "puzzle:hidden"
    val `history`: I18nKey = "puzzle:history"
    val `improvementAreas`: I18nKey = "puzzle:improvementAreas"
    val `improvementAreasDescription`: I18nKey = "puzzle:improvementAreasDescription"
    val `jumpToNextPuzzleImmediately`: I18nKey = "puzzle:jumpToNextPuzzleImmediately"
    val `keepGoing`: I18nKey = "puzzle:keepGoing"
    val `lengths`: I18nKey = "puzzle:lengths"
    val `lookupOfPlayer`: I18nKey = "puzzle:lookupOfPlayer"
    val `mates`: I18nKey = "puzzle:mates"
    val `motifs`: I18nKey = "puzzle:motifs"
    val `nbPlayed`: I18nKey = "puzzle:nbPlayed"
    val `nbPointsAboveYourPuzzleRating`: I18nKey = "puzzle:nbPointsAboveYourPuzzleRating"
    val `nbPointsBelowYourPuzzleRating`: I18nKey = "puzzle:nbPointsBelowYourPuzzleRating"
    val `nbToReplay`: I18nKey = "puzzle:nbToReplay"
    val `newStreak`: I18nKey = "puzzle:newStreak"
    val `nextPuzzle`: I18nKey = "puzzle:nextPuzzle"
    val `noPuzzlesToShow`: I18nKey = "puzzle:noPuzzlesToShow"
    val `normal`: I18nKey = "puzzle:normal"
    val `notTheMove`: I18nKey = "puzzle:notTheMove"
    val `openingsYouPlayedTheMost`: I18nKey = "puzzle:openingsYouPlayedTheMost"
    val `origin`: I18nKey = "puzzle:origin"
    val `percentSolved`: I18nKey = "puzzle:percentSolved"
    val `phases`: I18nKey = "puzzle:phases"
    val `playedXTimes`: I18nKey = "puzzle:playedXTimes"
    val `puzzleComplete`: I18nKey = "puzzle:puzzleComplete"
    val `puzzleDashboard`: I18nKey = "puzzle:puzzleDashboard"
    val `puzzleDashboardDescription`: I18nKey = "puzzle:puzzleDashboardDescription"
    val `puzzleId`: I18nKey = "puzzle:puzzleId"
    val `puzzleOfTheDay`: I18nKey = "puzzle:puzzleOfTheDay"
    val `puzzles`: I18nKey = "puzzle:puzzles"
    val `puzzlesByOpenings`: I18nKey = "puzzle:puzzlesByOpenings"
    val `puzzleSuccess`: I18nKey = "puzzle:puzzleSuccess"
    val `puzzleThemes`: I18nKey = "puzzle:puzzleThemes"
    val `ratingX`: I18nKey = "puzzle:ratingX"
    val `recommended`: I18nKey = "puzzle:recommended"
    val `searchPuzzles`: I18nKey = "puzzle:searchPuzzles"
    val `solved`: I18nKey = "puzzle:solved"
    val `specialMoves`: I18nKey = "puzzle:specialMoves"
    val `streakDescription`: I18nKey = "puzzle:streakDescription"
    val `streakSkipExplanation`: I18nKey = "puzzle:streakSkipExplanation"
    val `strengthDescription`: I18nKey = "puzzle:strengthDescription"
    val `strengths`: I18nKey = "puzzle:strengths"
    val `toGetPersonalizedPuzzles`: I18nKey = "puzzle:toGetPersonalizedPuzzles"
    val `trySomethingElse`: I18nKey = "puzzle:trySomethingElse"
    val `upVote`: I18nKey = "puzzle:upVote"
    val `useCtrlF`: I18nKey = "puzzle:useCtrlF"
    val `useFindInPage`: I18nKey = "puzzle:useFindInPage"
    val `voteToLoadNextOne`: I18nKey = "puzzle:voteToLoadNextOne"
    val `yourPuzzleRatingWillNotChange`: I18nKey = "puzzle:yourPuzzleRatingWillNotChange"
    val `yourStreakX`: I18nKey = "puzzle:yourStreakX"

  object puzzleTheme:
    val `advancedPawn`: I18nKey = "puzzleTheme:advancedPawn"
    val `advancedPawnDescription`: I18nKey = "puzzleTheme:advancedPawnDescription"
    val `advantage`: I18nKey = "puzzleTheme:advantage"
    val `advantageDescription`: I18nKey = "puzzleTheme:advantageDescription"
    val `anastasiaMate`: I18nKey = "puzzleTheme:anastasiaMate"
    val `anastasiaMateDescription`: I18nKey = "puzzleTheme:anastasiaMateDescription"
    val `arabianMate`: I18nKey = "puzzleTheme:arabianMate"
    val `arabianMateDescription`: I18nKey = "puzzleTheme:arabianMateDescription"
    val `attackingF2F7`: I18nKey = "puzzleTheme:attackingF2F7"
    val `attackingF2F7Description`: I18nKey = "puzzleTheme:attackingF2F7Description"
    val `attraction`: I18nKey = "puzzleTheme:attraction"
    val `attractionDescription`: I18nKey = "puzzleTheme:attractionDescription"
    val `backRankMate`: I18nKey = "puzzleTheme:backRankMate"
    val `backRankMateDescription`: I18nKey = "puzzleTheme:backRankMateDescription"
    val `bishopEndgame`: I18nKey = "puzzleTheme:bishopEndgame"
    val `bishopEndgameDescription`: I18nKey = "puzzleTheme:bishopEndgameDescription"
    val `bodenMate`: I18nKey = "puzzleTheme:bodenMate"
    val `bodenMateDescription`: I18nKey = "puzzleTheme:bodenMateDescription"
    val `capturingDefender`: I18nKey = "puzzleTheme:capturingDefender"
    val `capturingDefenderDescription`: I18nKey = "puzzleTheme:capturingDefenderDescription"
    val `castling`: I18nKey = "puzzleTheme:castling"
    val `castlingDescription`: I18nKey = "puzzleTheme:castlingDescription"
    val `clearance`: I18nKey = "puzzleTheme:clearance"
    val `clearanceDescription`: I18nKey = "puzzleTheme:clearanceDescription"
    val `crushing`: I18nKey = "puzzleTheme:crushing"
    val `crushingDescription`: I18nKey = "puzzleTheme:crushingDescription"
    val `defensiveMove`: I18nKey = "puzzleTheme:defensiveMove"
    val `defensiveMoveDescription`: I18nKey = "puzzleTheme:defensiveMoveDescription"
    val `deflection`: I18nKey = "puzzleTheme:deflection"
    val `deflectionDescription`: I18nKey = "puzzleTheme:deflectionDescription"
    val `discoveredAttack`: I18nKey = "puzzleTheme:discoveredAttack"
    val `discoveredAttackDescription`: I18nKey = "puzzleTheme:discoveredAttackDescription"
    val `doubleBishopMate`: I18nKey = "puzzleTheme:doubleBishopMate"
    val `doubleBishopMateDescription`: I18nKey = "puzzleTheme:doubleBishopMateDescription"
    val `doubleCheck`: I18nKey = "puzzleTheme:doubleCheck"
    val `doubleCheckDescription`: I18nKey = "puzzleTheme:doubleCheckDescription"
    val `dovetailMate`: I18nKey = "puzzleTheme:dovetailMate"
    val `dovetailMateDescription`: I18nKey = "puzzleTheme:dovetailMateDescription"
    val `endgame`: I18nKey = "puzzleTheme:endgame"
    val `endgameDescription`: I18nKey = "puzzleTheme:endgameDescription"
    val `enPassantDescription`: I18nKey = "puzzleTheme:enPassantDescription"
    val `equality`: I18nKey = "puzzleTheme:equality"
    val `equalityDescription`: I18nKey = "puzzleTheme:equalityDescription"
    val `exposedKing`: I18nKey = "puzzleTheme:exposedKing"
    val `exposedKingDescription`: I18nKey = "puzzleTheme:exposedKingDescription"
    val `fork`: I18nKey = "puzzleTheme:fork"
    val `forkDescription`: I18nKey = "puzzleTheme:forkDescription"
    val `hangingPiece`: I18nKey = "puzzleTheme:hangingPiece"
    val `hangingPieceDescription`: I18nKey = "puzzleTheme:hangingPieceDescription"
    val `healthyMix`: I18nKey = "puzzleTheme:healthyMix"
    val `healthyMixDescription`: I18nKey = "puzzleTheme:healthyMixDescription"
    val `hookMate`: I18nKey = "puzzleTheme:hookMate"
    val `hookMateDescription`: I18nKey = "puzzleTheme:hookMateDescription"
    val `interference`: I18nKey = "puzzleTheme:interference"
    val `interferenceDescription`: I18nKey = "puzzleTheme:interferenceDescription"
    val `intermezzo`: I18nKey = "puzzleTheme:intermezzo"
    val `intermezzoDescription`: I18nKey = "puzzleTheme:intermezzoDescription"
    val `kingsideAttack`: I18nKey = "puzzleTheme:kingsideAttack"
    val `kingsideAttackDescription`: I18nKey = "puzzleTheme:kingsideAttackDescription"
    val `knightEndgame`: I18nKey = "puzzleTheme:knightEndgame"
    val `knightEndgameDescription`: I18nKey = "puzzleTheme:knightEndgameDescription"
    val `long`: I18nKey = "puzzleTheme:long"
    val `longDescription`: I18nKey = "puzzleTheme:longDescription"
    val `master`: I18nKey = "puzzleTheme:master"
    val `masterDescription`: I18nKey = "puzzleTheme:masterDescription"
    val `masterVsMaster`: I18nKey = "puzzleTheme:masterVsMaster"
    val `masterVsMasterDescription`: I18nKey = "puzzleTheme:masterVsMasterDescription"
    val `mate`: I18nKey = "puzzleTheme:mate"
    val `mateDescription`: I18nKey = "puzzleTheme:mateDescription"
    val `mateIn1`: I18nKey = "puzzleTheme:mateIn1"
    val `mateIn1Description`: I18nKey = "puzzleTheme:mateIn1Description"
    val `mateIn2`: I18nKey = "puzzleTheme:mateIn2"
    val `mateIn2Description`: I18nKey = "puzzleTheme:mateIn2Description"
    val `mateIn3`: I18nKey = "puzzleTheme:mateIn3"
    val `mateIn3Description`: I18nKey = "puzzleTheme:mateIn3Description"
    val `mateIn4`: I18nKey = "puzzleTheme:mateIn4"
    val `mateIn4Description`: I18nKey = "puzzleTheme:mateIn4Description"
    val `mateIn5`: I18nKey = "puzzleTheme:mateIn5"
    val `mateIn5Description`: I18nKey = "puzzleTheme:mateIn5Description"
    val `middlegame`: I18nKey = "puzzleTheme:middlegame"
    val `middlegameDescription`: I18nKey = "puzzleTheme:middlegameDescription"
    val `oneMove`: I18nKey = "puzzleTheme:oneMove"
    val `oneMoveDescription`: I18nKey = "puzzleTheme:oneMoveDescription"
    val `opening`: I18nKey = "puzzleTheme:opening"
    val `openingDescription`: I18nKey = "puzzleTheme:openingDescription"
    val `pawnEndgame`: I18nKey = "puzzleTheme:pawnEndgame"
    val `pawnEndgameDescription`: I18nKey = "puzzleTheme:pawnEndgameDescription"
    val `pin`: I18nKey = "puzzleTheme:pin"
    val `pinDescription`: I18nKey = "puzzleTheme:pinDescription"
    val `playerGames`: I18nKey = "puzzleTheme:playerGames"
    val `playerGamesDescription`: I18nKey = "puzzleTheme:playerGamesDescription"
    val `promotion`: I18nKey = "puzzleTheme:promotion"
    val `promotionDescription`: I18nKey = "puzzleTheme:promotionDescription"
    val `puzzleDownloadInformation`: I18nKey = "puzzleTheme:puzzleDownloadInformation"
    val `queenEndgame`: I18nKey = "puzzleTheme:queenEndgame"
    val `queenEndgameDescription`: I18nKey = "puzzleTheme:queenEndgameDescription"
    val `queenRookEndgame`: I18nKey = "puzzleTheme:queenRookEndgame"
    val `queenRookEndgameDescription`: I18nKey = "puzzleTheme:queenRookEndgameDescription"
    val `queensideAttack`: I18nKey = "puzzleTheme:queensideAttack"
    val `queensideAttackDescription`: I18nKey = "puzzleTheme:queensideAttackDescription"
    val `quietMove`: I18nKey = "puzzleTheme:quietMove"
    val `quietMoveDescription`: I18nKey = "puzzleTheme:quietMoveDescription"
    val `rookEndgame`: I18nKey = "puzzleTheme:rookEndgame"
    val `rookEndgameDescription`: I18nKey = "puzzleTheme:rookEndgameDescription"
    val `sacrifice`: I18nKey = "puzzleTheme:sacrifice"
    val `sacrificeDescription`: I18nKey = "puzzleTheme:sacrificeDescription"
    val `short`: I18nKey = "puzzleTheme:short"
    val `shortDescription`: I18nKey = "puzzleTheme:shortDescription"
    val `skewer`: I18nKey = "puzzleTheme:skewer"
    val `skewerDescription`: I18nKey = "puzzleTheme:skewerDescription"
    val `smotheredMate`: I18nKey = "puzzleTheme:smotheredMate"
    val `smotheredMateDescription`: I18nKey = "puzzleTheme:smotheredMateDescription"
    val `superGM`: I18nKey = "puzzleTheme:superGM"
    val `superGMDescription`: I18nKey = "puzzleTheme:superGMDescription"
    val `trappedPiece`: I18nKey = "puzzleTheme:trappedPiece"
    val `trappedPieceDescription`: I18nKey = "puzzleTheme:trappedPieceDescription"
    val `underPromotion`: I18nKey = "puzzleTheme:underPromotion"
    val `underPromotionDescription`: I18nKey = "puzzleTheme:underPromotionDescription"
    val `veryLong`: I18nKey = "puzzleTheme:veryLong"
    val `veryLongDescription`: I18nKey = "puzzleTheme:veryLongDescription"
    val `xRayAttack`: I18nKey = "puzzleTheme:xRayAttack"
    val `xRayAttackDescription`: I18nKey = "puzzleTheme:xRayAttackDescription"
    val `zugzwang`: I18nKey = "puzzleTheme:zugzwang"
    val `zugzwangDescription`: I18nKey = "puzzleTheme:zugzwangDescription"

  object search:
    val `advancedSearch`: I18nKey = "search:advancedSearch"
    val `aiLevel`: I18nKey = "search:aiLevel"
    val `analysis`: I18nKey = "search:analysis"
    val `ascending`: I18nKey = "search:ascending"
    val `color`: I18nKey = "search:color"
    val `date`: I18nKey = "search:date"
    val `descending`: I18nKey = "search:descending"
    val `evaluation`: I18nKey = "search:evaluation"
    val `from`: I18nKey = "search:from"
    val `gamesFound`: I18nKey = "search:gamesFound"
    val `humanOrComputer`: I18nKey = "search:humanOrComputer"
    val `include`: I18nKey = "search:include"
    val `loser`: I18nKey = "search:loser"
    val `maxNumber`: I18nKey = "search:maxNumber"
    val `maxNumberExplanation`: I18nKey = "search:maxNumberExplanation"
    val `nbTurns`: I18nKey = "search:nbTurns"
    val `onlyAnalysed`: I18nKey = "search:onlyAnalysed"
    val `opponentName`: I18nKey = "search:opponentName"
    val `ratingExplanation`: I18nKey = "search:ratingExplanation"
    val `result`: I18nKey = "search:result"
    val `search`: I18nKey = "search:search"
    val `searchInXGames`: I18nKey = "search:searchInXGames"
    val `sortBy`: I18nKey = "search:sortBy"
    val `source`: I18nKey = "search:source"
    val `to`: I18nKey = "search:to"
    val `winnerColor`: I18nKey = "search:winnerColor"
    val `xGamesFound`: I18nKey = "search:xGamesFound"

  object settings:
    val `cantOpenSimilarAccount`: I18nKey = "settings:cantOpenSimilarAccount"
    val `changedMindDoNotCloseAccount`: I18nKey = "settings:changedMindDoNotCloseAccount"
    val `closeAccount`: I18nKey = "settings:closeAccount"
    val `closeAccountExplanation`: I18nKey = "settings:closeAccountExplanation"
    val `closingIsDefinitive`: I18nKey = "settings:closingIsDefinitive"
    val `managedAccountCannotBeClosed`: I18nKey = "settings:managedAccountCannotBeClosed"
    val `settings`: I18nKey = "settings:settings"
    val `thisAccountIsClosed`: I18nKey = "settings:thisAccountIsClosed"

  object site:
    val `abortGame`: I18nKey = "abortGame"
    val `abortTheGame`: I18nKey = "abortTheGame"
    val `about`: I18nKey = "about"
    val `aboutSimul`: I18nKey = "aboutSimul"
    val `aboutSimulImage`: I18nKey = "aboutSimulImage"
    val `aboutSimulRealLife`: I18nKey = "aboutSimulRealLife"
    val `aboutSimulRules`: I18nKey = "aboutSimulRules"
    val `aboutSimulSettings`: I18nKey = "aboutSimulSettings"
    val `aboutX`: I18nKey = "aboutX"
    val `accept`: I18nKey = "accept"
    val `accountCanLogin`: I18nKey = "accountCanLogin"
    val `accountClosed`: I18nKey = "accountClosed"
    val `accountConfirmationEmailNotNeeded`: I18nKey = "accountConfirmationEmailNotNeeded"
    val `accountConfirmed`: I18nKey = "accountConfirmed"
    val `accountRegisteredWithoutEmail`: I18nKey = "accountRegisteredWithoutEmail"
    val `accuracy`: I18nKey = "accuracy"
    val `activePlayers`: I18nKey = "activePlayers"
    val `addCurrentVariation`: I18nKey = "addCurrentVariation"
    val `advancedSettings`: I18nKey = "advancedSettings"
    val `advantage`: I18nKey = "advantage"
    val `agreementAssistance`: I18nKey = "agreementAssistance"
    val `agreementMultipleAccounts`: I18nKey = "agreementMultipleAccounts"
    val `agreementNice`: I18nKey = "agreementNice"
    val `agreementPolicy`: I18nKey = "agreementPolicy"
    val `aiNameLevelAiLevel`: I18nKey = "aiNameLevelAiLevel"
    val `allInformationIsPublicAndOptional`: I18nKey = "allInformationIsPublicAndOptional"
    val `allSet`: I18nKey = "allSet"
    val `allSquaresOfTheBoard`: I18nKey = "allSquaresOfTheBoard"
    val `always`: I18nKey = "always"
    val `analysis`: I18nKey = "analysis"
    val `analysisOptions`: I18nKey = "analysisOptions"
    val `analysisShapesHowTo`: I18nKey = "analysisShapesHowTo"
    val `andSaveNbPremoveLines`: I18nKey = "andSaveNbPremoveLines"
    val `anonymous`: I18nKey = "anonymous"
    val `anotherWasX`: I18nKey = "anotherWasX"
    val `apply`: I18nKey = "apply"
    val `asBlack`: I18nKey = "asBlack"
    val `asFreeAsLichess`: I18nKey = "asFreeAsLichess"
    val `askYourChessTeacherAboutLiftingKidMode`: I18nKey = "askYourChessTeacherAboutLiftingKidMode"
    val `asWhite`: I18nKey = "asWhite"
    val `automaticallyProceedToNextGameAfterMoving`: I18nKey = "automaticallyProceedToNextGameAfterMoving"
    val `autoSwitch`: I18nKey = "autoSwitch"
    val `availableInNbLanguages`: I18nKey = "availableInNbLanguages"
    val `averageCentipawnLoss`: I18nKey = "averageCentipawnLoss"
    val `averageElo`: I18nKey = "averageElo"
    val `averageOpponent`: I18nKey = "averageOpponent"
    val `averageRatingX`: I18nKey = "averageRatingX"
    val `background`: I18nKey = "background"
    val `backgroundImageUrl`: I18nKey = "backgroundImageUrl"
    val `backToGame`: I18nKey = "backToGame"
    val `backToTournament`: I18nKey = "backToTournament"
    val `berserkRate`: I18nKey = "berserkRate"
    val `bestMoveArrow`: I18nKey = "bestMoveArrow"
    val `bestWasX`: I18nKey = "bestWasX"
    val `betterThanPercentPlayers`: I18nKey = "betterThanPercentPlayers"
    val `bewareTheGameIsRatedButHasNoClock`: I18nKey = "bewareTheGameIsRatedButHasNoClock"
    val `biography`: I18nKey = "biography"
    val `biographyDescription`: I18nKey = "biographyDescription"
    val `black`: I18nKey = "black"
    val `blackCastlingKingside`: I18nKey = "blackCastlingKingside"
    val `blackCheckmatesInOneMove`: I18nKey = "blackCheckmatesInOneMove"
    val `blackDeclinesDraw`: I18nKey = "blackDeclinesDraw"
    val `blackDidntMove`: I18nKey = "blackDidntMove"
    val `blackIsVictorious`: I18nKey = "blackIsVictorious"
    val `blackLeftTheGame`: I18nKey = "blackLeftTheGame"
    val `blackOffersDraw`: I18nKey = "blackOffersDraw"
    val `blackPlays`: I18nKey = "blackPlays"
    val `blackResigned`: I18nKey = "blackResigned"
    val `blackTimeOut`: I18nKey = "blackTimeOut"
    val `blackWins`: I18nKey = "blackWins"
    val `blackWinsGame`: I18nKey = "blackWinsGame"
    val `blankedPassword`: I18nKey = "blankedPassword"
    val `blitz`: I18nKey = "blitz"
    val `blitzDesc`: I18nKey = "blitzDesc"
    val `block`: I18nKey = "block"
    val `blocked`: I18nKey = "blocked"
    val `blocks`: I18nKey = "blocks"
    val `blog`: I18nKey = "blog"
    val `blunder`: I18nKey = "blunder"
    val `board`: I18nKey = "board"
    val `boardEditor`: I18nKey = "boardEditor"
    val `boardReset`: I18nKey = "boardReset"
    val `bookmarkThisGame`: I18nKey = "bookmarkThisGame"
    val `brightness`: I18nKey = "brightness"
    val `builtForTheLoveOfChessNotMoney`: I18nKey = "builtForTheLoveOfChessNotMoney"
    val `bullet`: I18nKey = "bullet"
    val `bulletBlitzClassical`: I18nKey = "bulletBlitzClassical"
    val `bulletDesc`: I18nKey = "bulletDesc"
    val `by`: I18nKey = "by"
    val `byCPL`: I18nKey = "byCPL"
    val `byRegisteringYouAgreeToBeBoundByOur`: I18nKey = "byRegisteringYouAgreeToBeBoundByOur"
    val `calculatingMoves`: I18nKey = "calculatingMoves"
    val `cancel`: I18nKey = "cancel"
    val `cancelRematchOffer`: I18nKey = "cancelRematchOffer"
    val `cancelSimul`: I18nKey = "cancelSimul"
    val `cancelTournament`: I18nKey = "cancelTournament"
    val `cantDoThisTwice`: I18nKey = "cantDoThisTwice"
    val `captcha.fail`: I18nKey = "captcha.fail"
    val `capture`: I18nKey = "capture"
    val `castling`: I18nKey = "castling"
    val `casual`: I18nKey = "casual"
    val `casualTournament`: I18nKey = "casualTournament"
    val `changeEmail`: I18nKey = "changeEmail"
    val `changePassword`: I18nKey = "changePassword"
    val `changeUsername`: I18nKey = "changeUsername"
    val `changeUsernameDescription`: I18nKey = "changeUsernameDescription"
    val `changeUsernameNotSame`: I18nKey = "changeUsernameNotSame"
    val `chat`: I18nKey = "chat"
    val `chatRoom`: I18nKey = "chatRoom"
    val `cheat`: I18nKey = "cheat"
    val `cheatDetected`: I18nKey = "cheatDetected"
    val `checkmate`: I18nKey = "checkmate"
    val `checkSpamFolder`: I18nKey = "checkSpamFolder"
    val `checkYourEmail`: I18nKey = "checkYourEmail"
    val `chess960StartPosition`: I18nKey = "chess960StartPosition"
    val `chessBasics`: I18nKey = "chessBasics"
    val `claimADraw`: I18nKey = "claimADraw"
    val `classical`: I18nKey = "classical"
    val `classicalDesc`: I18nKey = "classicalDesc"
    val `clearBoard`: I18nKey = "clearBoard"
    val `clearSavedMoves`: I18nKey = "clearSavedMoves"
    val `clickHereToReadIt`: I18nKey = "clickHereToReadIt"
    val `clickOnTheBoardToMakeYourMove`: I18nKey = "clickOnTheBoardToMakeYourMove"
    val `clickToRevealEmailAddress`: I18nKey = "clickToRevealEmailAddress"
    val `clock`: I18nKey = "clock"
    val `clockIncrement`: I18nKey = "clockIncrement"
    val `clockInitialTime`: I18nKey = "clockInitialTime"
    val `close`: I18nKey = "close"
    val `closedAccountChangedMind`: I18nKey = "closedAccountChangedMind"
    val `closingAccountWithdrawAppeal`: I18nKey = "closingAccountWithdrawAppeal"
    val `cloudAnalysis`: I18nKey = "cloudAnalysis"
    val `coaches`: I18nKey = "coaches"
    val `coachManager`: I18nKey = "coachManager"
    val `collapseVariations`: I18nKey = "collapseVariations"
    val `community`: I18nKey = "community"
    val `composeMessage`: I18nKey = "composeMessage"
    val `computer`: I18nKey = "computer"
    val `computerAnalysis`: I18nKey = "computerAnalysis"
    val `computerAnalysisAvailable`: I18nKey = "computerAnalysisAvailable"
    val `computerAnalysisDisabled`: I18nKey = "computerAnalysisDisabled"
    val `computersAreNotAllowedToPlay`: I18nKey = "computersAreNotAllowedToPlay"
    val `computerThinking`: I18nKey = "computerThinking"
    val `conditionalPremoves`: I18nKey = "conditionalPremoves"
    val `conditionOfEntry`: I18nKey = "conditionOfEntry"
    val `confirmMove`: I18nKey = "confirmMove"
    val `congratsYouWon`: I18nKey = "congratsYouWon"
    val `continueFromHere`: I18nKey = "continueFromHere"
    val `contribute`: I18nKey = "contribute"
    val `copyTextToEmail`: I18nKey = "copyTextToEmail"
    val `copyVariationPgn`: I18nKey = "copyVariationPgn"
    val `correspondence`: I18nKey = "correspondence"
    val `correspondenceChess`: I18nKey = "correspondenceChess"
    val `correspondenceDesc`: I18nKey = "correspondenceDesc"
    val `countryRegion`: I18nKey = "countryRegion"
    val `cpus`: I18nKey = "cpus"
    val `create`: I18nKey = "create"
    val `createAGame`: I18nKey = "createAGame"
    val `createANewTopic`: I18nKey = "createANewTopic"
    val `createANewTournament`: I18nKey = "createANewTournament"
    val `createdBy`: I18nKey = "createdBy"
    val `createdSimuls`: I18nKey = "createdSimuls"
    val `createTheTopic`: I18nKey = "createTheTopic"
    val `crosstable`: I18nKey = "crosstable"
    val `cumulative`: I18nKey = "cumulative"
    val `currentGames`: I18nKey = "currentGames"
    val `currentMatchScore`: I18nKey = "currentMatchScore"
    val `currentPassword`: I18nKey = "currentPassword"
    val `custom`: I18nKey = "custom"
    val `customPosition`: I18nKey = "customPosition"
    val `cyclePreviousOrNextVariation`: I18nKey = "cyclePreviousOrNextVariation"
    val `dark`: I18nKey = "dark"
    val `database`: I18nKey = "database"
    val `daysPerTurn`: I18nKey = "daysPerTurn"
    val `decline`: I18nKey = "decline"
    val `defeat`: I18nKey = "defeat"
    val `defeatVsYInZ`: I18nKey = "defeatVsYInZ"
    val `delete`: I18nKey = "delete"
    val `deleteFromHere`: I18nKey = "deleteFromHere"
    val `deleteThisImportedGame`: I18nKey = "deleteThisImportedGame"
    val `depthX`: I18nKey = "depthX"
    val `descPrivate`: I18nKey = "descPrivate"
    val `descPrivateHelp`: I18nKey = "descPrivateHelp"
    val `description`: I18nKey = "description"
    val `deviceTheme`: I18nKey = "deviceTheme"
    val `disableKidMode`: I18nKey = "disableKidMode"
    val `discussions`: I18nKey = "discussions"
    val `doItAgain`: I18nKey = "doItAgain"
    val `doneReviewingBlackMistakes`: I18nKey = "doneReviewingBlackMistakes"
    val `doneReviewingWhiteMistakes`: I18nKey = "doneReviewingWhiteMistakes"
    val `download`: I18nKey = "download"
    val `downloadAnnotated`: I18nKey = "downloadAnnotated"
    val `downloadImported`: I18nKey = "downloadImported"
    val `downloadRaw`: I18nKey = "downloadRaw"
    val `draw`: I18nKey = "draw"
    val `drawByFiftyMoves`: I18nKey = "drawByFiftyMoves"
    val `drawByMutualAgreement`: I18nKey = "drawByMutualAgreement"
    val `drawn`: I18nKey = "drawn"
    val `drawOfferAccepted`: I18nKey = "drawOfferAccepted"
    val `drawOfferCanceled`: I18nKey = "drawOfferCanceled"
    val `drawOfferSent`: I18nKey = "drawOfferSent"
    val `drawRate`: I18nKey = "drawRate"
    val `draws`: I18nKey = "draws"
    val `drawVsYInZ`: I18nKey = "drawVsYInZ"
    val `dtzWithRounding`: I18nKey = "dtzWithRounding"
    val `duration`: I18nKey = "duration"
    val `edit`: I18nKey = "edit"
    val `editProfile`: I18nKey = "editProfile"
    val `email`: I18nKey = "email"
    val `emailAssociatedToaccount`: I18nKey = "emailAssociatedToaccount"
    val `emailCanTakeSomeTime`: I18nKey = "emailCanTakeSomeTime"
    val `emailConfirmHelp`: I18nKey = "emailConfirmHelp"
    val `emailConfirmNotReceived`: I18nKey = "emailConfirmNotReceived"
    val `emailForSignupHelp`: I18nKey = "emailForSignupHelp"
    val `emailMeALink`: I18nKey = "emailMeALink"
    val `emailSent`: I18nKey = "emailSent"
    val `emailSuggestion`: I18nKey = "emailSuggestion"
    val `embedInYourWebsite`: I18nKey = "embedInYourWebsite"
    val `embedsAvailable`: I18nKey = "embedsAvailable"
    val `emptyTournamentName`: I18nKey = "emptyTournamentName"
    val `enable`: I18nKey = "enable"
    val `enableKidMode`: I18nKey = "enableKidMode"
    val `endgame`: I18nKey = "endgame"
    val `endgamePositions`: I18nKey = "endgamePositions"
    val `engineFailed`: I18nKey = "engineFailed"
    val `engineManager`: I18nKey = "engineManager"
    val `error.email`: I18nKey = "error.email"
    val `error.email_acceptable`: I18nKey = "error.email_acceptable"
    val `error.email_different`: I18nKey = "error.email_different"
    val `error.email_unique`: I18nKey = "error.email_unique"
    val `error.max`: I18nKey = "error.max"
    val `error.maxLength`: I18nKey = "error.maxLength"
    val `error.min`: I18nKey = "error.min"
    val `error.minLength`: I18nKey = "error.minLength"
    val `error.namePassword`: I18nKey = "error.namePassword"
    val `error.provideOneCheatedGameLink`: I18nKey = "error.provideOneCheatedGameLink"
    val `error.required`: I18nKey = "error.required"
    val `error.unknown`: I18nKey = "error.unknown"
    val `error.weakPassword`: I18nKey = "error.weakPassword"
    val `estimatedStart`: I18nKey = "estimatedStart"
    val `evaluatingYourMove`: I18nKey = "evaluatingYourMove"
    val `evaluationGauge`: I18nKey = "evaluationGauge"
    val `eventInProgress`: I18nKey = "eventInProgress"
    val `everybodyGetsAllFeaturesForFree`: I18nKey = "everybodyGetsAllFeaturesForFree"
    val `expandVariations`: I18nKey = "expandVariations"
    val `exportGames`: I18nKey = "exportGames"
    val `fast`: I18nKey = "fast"
    val `favoriteOpponents`: I18nKey = "favoriteOpponents"
    val `fiftyMovesWithoutProgress`: I18nKey = "fiftyMovesWithoutProgress"
    val `filterGames`: I18nKey = "filterGames"
    val `findBetterMoveForBlack`: I18nKey = "findBetterMoveForBlack"
    val `findBetterMoveForWhite`: I18nKey = "findBetterMoveForWhite"
    val `finished`: I18nKey = "finished"
    val `flair`: I18nKey = "flair"
    val `flipBoard`: I18nKey = "flipBoard"
    val `focusChat`: I18nKey = "focusChat"
    val `follow`: I18nKey = "follow"
    val `followAndChallengeFriends`: I18nKey = "followAndChallengeFriends"
    val `following`: I18nKey = "following"
    val `followsYou`: I18nKey = "followsYou"
    val `followX`: I18nKey = "followX"
    val `forceDraw`: I18nKey = "forceDraw"
    val `forceResignation`: I18nKey = "forceResignation"
    val `forceVariation`: I18nKey = "forceVariation"
    val `forgotPassword`: I18nKey = "forgotPassword"
    val `forum`: I18nKey = "forum"
    val `freeOnlineChess`: I18nKey = "freeOnlineChess"
    val `friends`: I18nKey = "friends"
    val `fromPosition`: I18nKey = "fromPosition"
    val `fullFeatured`: I18nKey = "fullFeatured"
    val `gameAborted`: I18nKey = "gameAborted"
    val `gameAnalysis`: I18nKey = "gameAnalysis"
    val `gameAsGIF`: I18nKey = "gameAsGIF"
    val `gameInProgress`: I18nKey = "gameInProgress"
    val `gameOver`: I18nKey = "gameOver"
    val `games`: I18nKey = "games"
    val `gamesPlayed`: I18nKey = "gamesPlayed"
    val `gameVsX`: I18nKey = "gameVsX"
    val `getAHint`: I18nKey = "getAHint"
    val `giveNbSeconds`: I18nKey = "giveNbSeconds"
    val `glicko2Rating`: I18nKey = "glicko2Rating"
    val `goDeeper`: I18nKey = "goDeeper"
    val `goodPractice`: I18nKey = "goodPractice"
    val `graph`: I18nKey = "graph"
    val `hangOn`: I18nKey = "hangOn"
    val `help`: I18nKey = "help"
    val `hideBestMove`: I18nKey = "hideBestMove"
    val `host`: I18nKey = "host"
    val `hostANewSimul`: I18nKey = "hostANewSimul"
    val `hostColorX`: I18nKey = "hostColorX"
    val `howToAvoidThis`: I18nKey = "howToAvoidThis"
    val `hue`: I18nKey = "hue"
    val `human`: I18nKey = "human"
    val `ifNoneLeaveEmpty`: I18nKey = "ifNoneLeaveEmpty"
    val `ifRatingIsPlusMinusX`: I18nKey = "ifRatingIsPlusMinusX"
    val `ifRegistered`: I18nKey = "ifRegistered"
    val `ifYouDoNotSeeTheEmailCheckOtherPlaces`: I18nKey = "ifYouDoNotSeeTheEmailCheckOtherPlaces"
    val `important`: I18nKey = "important"
    val `importedByX`: I18nKey = "importedByX"
    val `importGame`: I18nKey = "importGame"
    val `importGameCaveat`: I18nKey = "importGameCaveat"
    val `importGameDataPrivacyWarning`: I18nKey = "importGameDataPrivacyWarning"
    val `importGameExplanation`: I18nKey = "importGameExplanation"
    val `importPgn`: I18nKey = "importPgn"
    val `inaccuracy`: I18nKey = "inaccuracy"
    val `inappropriateNameWarning`: I18nKey = "inappropriateNameWarning"
    val `inbox`: I18nKey = "inbox"
    val `incorrectPassword`: I18nKey = "incorrectPassword"
    val `increment`: I18nKey = "increment"
    val `incrementInSeconds`: I18nKey = "incrementInSeconds"
    val `infiniteAnalysis`: I18nKey = "infiniteAnalysis"
    val `inKidModeTheLichessLogoGetsIconX`: I18nKey = "inKidModeTheLichessLogoGetsIconX"
    val `inlineNotation`: I18nKey = "inlineNotation"
    val `inLocalBrowser`: I18nKey = "inLocalBrowser"
    val `insideTheBoard`: I18nKey = "insideTheBoard"
    val `instructions`: I18nKey = "instructions"
    val `insufficientMaterial`: I18nKey = "insufficientMaterial"
    val `inTheFAQ`: I18nKey = "inTheFAQ"
    val `invalidAuthenticationCode`: I18nKey = "invalidAuthenticationCode"
    val `invalidFen`: I18nKey = "invalidFen"
    val `invalidPgn`: I18nKey = "invalidPgn"
    val `invalidUsernameOrPassword`: I18nKey = "invalidUsernameOrPassword"
    val `invitedYouToX`: I18nKey = "invitedYouToX"
    val `inYourLocalTimezone`: I18nKey = "inYourLocalTimezone"
    val `isPrivate`: I18nKey = "isPrivate"
    val `itsYourTurn`: I18nKey = "itsYourTurn"
    val `join`: I18nKey = "join"
    val `joinTheGame`: I18nKey = "joinTheGame"
    val `joinTheTeamXToPost`: I18nKey = "joinTheTeamXToPost"
    val `keyboardShortcuts`: I18nKey = "keyboardShortcuts"
    val `keyCycleSelectedVariation`: I18nKey = "keyCycleSelectedVariation"
    val `keyEnterOrExitVariation`: I18nKey = "keyEnterOrExitVariation"
    val `keyGoToStartOrEnd`: I18nKey = "keyGoToStartOrEnd"
    val `keyMoveBackwardOrForward`: I18nKey = "keyMoveBackwardOrForward"
    val `keyNextBlunder`: I18nKey = "keyNextBlunder"
    val `keyNextBranch`: I18nKey = "keyNextBranch"
    val `keyNextInaccuracy`: I18nKey = "keyNextInaccuracy"
    val `keyNextLearnFromYourMistakes`: I18nKey = "keyNextLearnFromYourMistakes"
    val `keyNextMistake`: I18nKey = "keyNextMistake"
    val `keyPreviousBranch`: I18nKey = "keyPreviousBranch"
    val `keyRequestComputerAnalysis`: I18nKey = "keyRequestComputerAnalysis"
    val `keyShowOrHideComments`: I18nKey = "keyShowOrHideComments"
    val `kidMode`: I18nKey = "kidMode"
    val `kidModeExplanation`: I18nKey = "kidModeExplanation"
    val `kidModeIsEnabled`: I18nKey = "kidModeIsEnabled"
    val `kingInTheCenter`: I18nKey = "kingInTheCenter"
    val `language`: I18nKey = "language"
    val `lastPost`: I18nKey = "lastPost"
    val `lastSeenActive`: I18nKey = "lastSeenActive"
    val `latestForumPosts`: I18nKey = "latestForumPosts"
    val `leaderboard`: I18nKey = "leaderboard"
    val `learnFromThisMistake`: I18nKey = "learnFromThisMistake"
    val `learnFromYourMistakes`: I18nKey = "learnFromYourMistakes"
    val `learnMenu`: I18nKey = "learnMenu"
    val `lessThanNbMinutes`: I18nKey = "lessThanNbMinutes"
    val `letOtherPlayersChallengeYou`: I18nKey = "letOtherPlayersChallengeYou"
    val `letOtherPlayersFollowYou`: I18nKey = "letOtherPlayersFollowYou"
    val `letOtherPlayersInviteYouToStudy`: I18nKey = "letOtherPlayersInviteYouToStudy"
    val `letOtherPlayersMessageYou`: I18nKey = "letOtherPlayersMessageYou"
    val `level`: I18nKey = "level"
    val `lichessDbExplanation`: I18nKey = "lichessDbExplanation"
    val `lichessPatronInfo`: I18nKey = "lichessPatronInfo"
    val `lichessTournaments`: I18nKey = "lichessTournaments"
    val `lifetimeScore`: I18nKey = "lifetimeScore"
    val `light`: I18nKey = "light"
    val `list`: I18nKey = "list"
    val `listBlockedPlayers`: I18nKey = "listBlockedPlayers"
    val `loadingEngine`: I18nKey = "loadingEngine"
    val `loadPosition`: I18nKey = "loadPosition"
    val `lobby`: I18nKey = "lobby"
    val `location`: I18nKey = "location"
    val `loginToChat`: I18nKey = "loginToChat"
    val `logOut`: I18nKey = "logOut"
    val `losing`: I18nKey = "losing"
    val `losses`: I18nKey = "losses"
    val `lossOr50MovesByPriorMistake`: I18nKey = "lossOr50MovesByPriorMistake"
    val `lossSavedBy50MoveRule`: I18nKey = "lossSavedBy50MoveRule"
    val `lostAgainstTOSViolator`: I18nKey = "lostAgainstTOSViolator"
    val `makeAStudy`: I18nKey = "makeAStudy"
    val `makeMainLine`: I18nKey = "makeMainLine"
    val `makePrivateTournament`: I18nKey = "makePrivateTournament"
    val `makeSureToRead`: I18nKey = "makeSureToRead"
    val `markdownAvailable`: I18nKey = "markdownAvailable"
    val `masterDbExplanation`: I18nKey = "masterDbExplanation"
    val `mateInXHalfMoves`: I18nKey = "mateInXHalfMoves"
    val `maxDepthReached`: I18nKey = "maxDepthReached"
    val `maximumNbCharacters`: I18nKey = "maximumNbCharacters"
    val `maximumWeeklyRating`: I18nKey = "maximumWeeklyRating"
    val `maybeIncludeMoreGamesFromThePreferencesMenu`: I18nKey = "maybeIncludeMoreGamesFromThePreferencesMenu"
    val `memberSince`: I18nKey = "memberSince"
    val `memory`: I18nKey = "memory"
    val `mentionedYouInX`: I18nKey = "mentionedYouInX"
    val `menu`: I18nKey = "menu"
    val `message`: I18nKey = "message"
    val `middlegame`: I18nKey = "middlegame"
    val `minimumRatedGames`: I18nKey = "minimumRatedGames"
    val `minimumRating`: I18nKey = "minimumRating"
    val `minutesPerSide`: I18nKey = "minutesPerSide"
    val `mistake`: I18nKey = "mistake"
    val `mobile`: I18nKey = "mobile"
    val `mobileApp`: I18nKey = "mobileApp"
    val `mode`: I18nKey = "mode"
    val `more`: I18nKey = "more"
    val `moreThanNbPerfRatedGames`: I18nKey = "moreThanNbPerfRatedGames"
    val `moreThanNbRatedGames`: I18nKey = "moreThanNbRatedGames"
    val `mouseTricks`: I18nKey = "mouseTricks"
    val `move`: I18nKey = "move"
    val `movesPlayed`: I18nKey = "movesPlayed"
    val `moveTimes`: I18nKey = "moveTimes"
    val `multipleLines`: I18nKey = "multipleLines"
    val `mustBeInTeam`: I18nKey = "mustBeInTeam"
    val `name`: I18nKey = "name"
    val `navigateMoveTree`: I18nKey = "navigateMoveTree"
    val `nbBlunders`: I18nKey = "nbBlunders"
    val `nbBookmarks`: I18nKey = "nbBookmarks"
    val `nbDays`: I18nKey = "nbDays"
    val `nbDraws`: I18nKey = "nbDraws"
    val `nbFollowers`: I18nKey = "nbFollowers"
    val `nbFollowing`: I18nKey = "nbFollowing"
    val `nbForumPosts`: I18nKey = "nbForumPosts"
    val `nbFriendsOnline`: I18nKey = "nbFriendsOnline"
    val `nbGames`: I18nKey = "nbGames"
    val `nbGamesInPlay`: I18nKey = "nbGamesInPlay"
    val `nbGamesWithYou`: I18nKey = "nbGamesWithYou"
    val `nbHours`: I18nKey = "nbHours"
    val `nbImportedGames`: I18nKey = "nbImportedGames"
    val `nbInaccuracies`: I18nKey = "nbInaccuracies"
    val `nbLosses`: I18nKey = "nbLosses"
    val `nbMinutes`: I18nKey = "nbMinutes"
    val `nbMistakes`: I18nKey = "nbMistakes"
    val `nbPerfTypePlayersThisWeek`: I18nKey = "nbPerfTypePlayersThisWeek"
    val `nbPlayers`: I18nKey = "nbPlayers"
    val `nbPlaying`: I18nKey = "nbPlaying"
    val `nbPuzzles`: I18nKey = "nbPuzzles"
    val `nbRated`: I18nKey = "nbRated"
    val `nbSeconds`: I18nKey = "nbSeconds"
    val `nbSecondsToPlayTheFirstMove`: I18nKey = "nbSecondsToPlayTheFirstMove"
    val `nbSimuls`: I18nKey = "nbSimuls"
    val `nbStudies`: I18nKey = "nbStudies"
    val `nbTournamentPoints`: I18nKey = "nbTournamentPoints"
    val `nbWins`: I18nKey = "nbWins"
    val `needNbMoreGames`: I18nKey = "needNbMoreGames"
    val `needNbMorePerfGames`: I18nKey = "needNbMorePerfGames"
    val `networkLagBetweenYouAndLichess`: I18nKey = "networkLagBetweenYouAndLichess"
    val `never`: I18nKey = "never"
    val `neverTypeYourPassword`: I18nKey = "neverTypeYourPassword"
    val `newOpponent`: I18nKey = "newOpponent"
    val `newPassword`: I18nKey = "newPassword"
    val `newPasswordAgain`: I18nKey = "newPasswordAgain"
    val `newPasswordsDontMatch`: I18nKey = "newPasswordsDontMatch"
    val `newPasswordStrength`: I18nKey = "newPasswordStrength"
    val `newTournament`: I18nKey = "newTournament"
    val `next`: I18nKey = "next"
    val `nextXTournament`: I18nKey = "nextXTournament"
    val `no`: I18nKey = "no"
    val `noChat`: I18nKey = "noChat"
    val `noConditionalPremoves`: I18nKey = "noConditionalPremoves"
    val `noDrawBeforeSwissLimit`: I18nKey = "noDrawBeforeSwissLimit"
    val `noGameFound`: I18nKey = "noGameFound"
    val `noMistakesFoundForBlack`: I18nKey = "noMistakesFoundForBlack"
    val `noMistakesFoundForWhite`: I18nKey = "noMistakesFoundForWhite"
    val `none`: I18nKey = "none"
    val `noNetwork`: I18nKey = "noNetwork"
    val `noNoteYet`: I18nKey = "noNoteYet"
    val `noRestriction`: I18nKey = "noRestriction"
    val `normal`: I18nKey = "normal"
    val `noSimulExplanation`: I18nKey = "noSimulExplanation"
    val `noSimulFound`: I18nKey = "noSimulFound"
    val `notACheckmate`: I18nKey = "notACheckmate"
    val `notes`: I18nKey = "notes"
    val `nothingToSeeHere`: I18nKey = "nothingToSeeHere"
    val `notifications`: I18nKey = "notifications"
    val `notificationsX`: I18nKey = "notificationsX"
    val `offerDraw`: I18nKey = "offerDraw"
    val `oneDay`: I18nKey = "oneDay"
    val `oneUrlPerLine`: I18nKey = "oneUrlPerLine"
    val `onlineAndOfflinePlay`: I18nKey = "onlineAndOfflinePlay"
    val `onlineBots`: I18nKey = "onlineBots"
    val `onlinePlayers`: I18nKey = "onlinePlayers"
    val `onlyExistingConversations`: I18nKey = "onlyExistingConversations"
    val `onlyFriends`: I18nKey = "onlyFriends"
    val `onlyMembersOfTeam`: I18nKey = "onlyMembersOfTeam"
    val `onlyTeamLeaders`: I18nKey = "onlyTeamLeaders"
    val `onlyTeamMembers`: I18nKey = "onlyTeamMembers"
    val `onlyWorksOnce`: I18nKey = "onlyWorksOnce"
    val `onSlowGames`: I18nKey = "onSlowGames"
    val `opacity`: I18nKey = "opacity"
    val `opening`: I18nKey = "opening"
    val `openingEndgameExplorer`: I18nKey = "openingEndgameExplorer"
    val `openingExplorer`: I18nKey = "openingExplorer"
    val `openingExplorerAndTablebase`: I18nKey = "openingExplorerAndTablebase"
    val `openings`: I18nKey = "openings"
    val `openStudy`: I18nKey = "openStudy"
    val `openTournaments`: I18nKey = "openTournaments"
    val `opponent`: I18nKey = "opponent"
    val `opponentLeftChoices`: I18nKey = "opponentLeftChoices"
    val `opponentLeftCounter`: I18nKey = "opponentLeftCounter"
    val `orLetYourOpponentScanQrCode`: I18nKey = "orLetYourOpponentScanQrCode"
    val `orUploadPgnFile`: I18nKey = "orUploadPgnFile"
    val `other`: I18nKey = "other"
    val `otherPlayers`: I18nKey = "otherPlayers"
    val `ourEventTips`: I18nKey = "ourEventTips"
    val `outsideTheBoard`: I18nKey = "outsideTheBoard"
    val `password`: I18nKey = "password"
    val `passwordReset`: I18nKey = "passwordReset"
    val `passwordSuggestion`: I18nKey = "passwordSuggestion"
    val `pasteTheFenStringHere`: I18nKey = "pasteTheFenStringHere"
    val `pasteThePgnStringHere`: I18nKey = "pasteThePgnStringHere"
    val `pause`: I18nKey = "pause"
    val `pawnMove`: I18nKey = "pawnMove"
    val `performance`: I18nKey = "performance"
    val `perfRatingX`: I18nKey = "perfRatingX"
    val `phoneAndTablet`: I18nKey = "phoneAndTablet"
    val `pieceSet`: I18nKey = "pieceSet"
    val `play`: I18nKey = "play"
    val `playChessEverywhere`: I18nKey = "playChessEverywhere"
    val `playChessInStyle`: I18nKey = "playChessInStyle"
    val `playComputerMove`: I18nKey = "playComputerMove"
    val `player`: I18nKey = "player"
    val `players`: I18nKey = "players"
    val `playEveryGame`: I18nKey = "playEveryGame"
    val `playFirstOpeningEndgameExplorerMove`: I18nKey = "playFirstOpeningEndgameExplorerMove"
    val `playingRightNow`: I18nKey = "playingRightNow"
    val `playSelectedMove`: I18nKey = "playSelectedMove"
    val `playVariationToCreateConditionalPremoves`: I18nKey = "playVariationToCreateConditionalPremoves"
    val `playWithAFriend`: I18nKey = "playWithAFriend"
    val `playWithTheMachine`: I18nKey = "playWithTheMachine"
    val `playX`: I18nKey = "playX"
    val `pleasantChessExperience`: I18nKey = "pleasantChessExperience"
    val `points`: I18nKey = "points"
    val `popularOpenings`: I18nKey = "popularOpenings"
    val `positionInputHelp`: I18nKey = "positionInputHelp"
    val `posts`: I18nKey = "posts"
    val `potentialProblem`: I18nKey = "potentialProblem"
    val `practice`: I18nKey = "practice"
    val `practiceWithComputer`: I18nKey = "practiceWithComputer"
    val `previouslyOnLichessTV`: I18nKey = "previouslyOnLichessTV"
    val `privacy`: I18nKey = "privacy"
    val `privacyPolicy`: I18nKey = "privacyPolicy"
    val `proceedToX`: I18nKey = "proceedToX"
    val `profile`: I18nKey = "profile"
    val `profileCompletion`: I18nKey = "profileCompletion"
    val `promoteVariation`: I18nKey = "promoteVariation"
    val `proposeATakeback`: I18nKey = "proposeATakeback"
    val `puzzleDesc`: I18nKey = "puzzleDesc"
    val `puzzles`: I18nKey = "puzzles"
    val `quickPairing`: I18nKey = "quickPairing"
    val `raceFinished`: I18nKey = "raceFinished"
    val `randomColor`: I18nKey = "randomColor"
    val `rank`: I18nKey = "rank"
    val `rankIsUpdatedEveryNbMinutes`: I18nKey = "rankIsUpdatedEveryNbMinutes"
    val `rankX`: I18nKey = "rankX"
    val `rapid`: I18nKey = "rapid"
    val `rapidDesc`: I18nKey = "rapidDesc"
    val `rated`: I18nKey = "rated"
    val `ratedFormHelp`: I18nKey = "ratedFormHelp"
    val `ratedLessThanInPerf`: I18nKey = "ratedLessThanInPerf"
    val `ratedMoreThanInPerf`: I18nKey = "ratedMoreThanInPerf"
    val `ratedTournament`: I18nKey = "ratedTournament"
    val `rating`: I18nKey = "rating"
    val `ratingRange`: I18nKey = "ratingRange"
    val `ratingStats`: I18nKey = "ratingStats"
    val `ratingXOverYGames`: I18nKey = "ratingXOverYGames"
    val `readAboutOur`: I18nKey = "readAboutOur"
    val `really`: I18nKey = "really"
    val `realName`: I18nKey = "realName"
    val `realTime`: I18nKey = "realTime"
    val `realtimeReplay`: I18nKey = "realtimeReplay"
    val `reason`: I18nKey = "reason"
    val `receiveForumNotifications`: I18nKey = "receiveForumNotifications"
    val `recentGames`: I18nKey = "recentGames"
    val `reconnecting`: I18nKey = "reconnecting"
    val `refreshInboxAfterFiveMinutes`: I18nKey = "refreshInboxAfterFiveMinutes"
    val `refundXpointsTimeControlY`: I18nKey = "refundXpointsTimeControlY"
    val `rematch`: I18nKey = "rematch"
    val `rematchOfferAccepted`: I18nKey = "rematchOfferAccepted"
    val `rematchOfferCanceled`: I18nKey = "rematchOfferCanceled"
    val `rematchOfferDeclined`: I18nKey = "rematchOfferDeclined"
    val `rematchOfferSent`: I18nKey = "rematchOfferSent"
    val `rememberMe`: I18nKey = "rememberMe"
    val `removesTheDepthLimit`: I18nKey = "removesTheDepthLimit"
    val `reopenYourAccount`: I18nKey = "reopenYourAccount"
    val `replayMode`: I18nKey = "replayMode"
    val `replies`: I18nKey = "replies"
    val `reply`: I18nKey = "reply"
    val `replyToThisTopic`: I18nKey = "replyToThisTopic"
    val `reportAUser`: I18nKey = "reportAUser"
    val `reportCheatBoostHelp`: I18nKey = "reportCheatBoostHelp"
    val `reportProcessedFasterInEnglish`: I18nKey = "reportProcessedFasterInEnglish"
    val `reportUsernameHelp`: I18nKey = "reportUsernameHelp"
    val `reportXToModerators`: I18nKey = "reportXToModerators"
    val `requestAComputerAnalysis`: I18nKey = "requestAComputerAnalysis"
    val `required`: I18nKey = "required"
    val `reset`: I18nKey = "reset"
    val `resign`: I18nKey = "resign"
    val `resignLostGames`: I18nKey = "resignLostGames"
    val `resignTheGame`: I18nKey = "resignTheGame"
    val `resume`: I18nKey = "resume"
    val `resumeLearning`: I18nKey = "resumeLearning"
    val `resumePractice`: I18nKey = "resumePractice"
    val `resVsX`: I18nKey = "resVsX"
    val `retry`: I18nKey = "retry"
    val `returnToSimulHomepage`: I18nKey = "returnToSimulHomepage"
    val `returnToTournamentsHomepage`: I18nKey = "returnToTournamentsHomepage"
    val `reviewBlackMistakes`: I18nKey = "reviewBlackMistakes"
    val `reviewWhiteMistakes`: I18nKey = "reviewWhiteMistakes"
    val `revokeAllSessions`: I18nKey = "revokeAllSessions"
    val `safeTournamentName`: I18nKey = "safeTournamentName"
    val `save`: I18nKey = "save"
    val `screenshotCurrentPosition`: I18nKey = "screenshotCurrentPosition"
    val `scrollOverComputerVariationsToPreviewThem`: I18nKey = "scrollOverComputerVariationsToPreviewThem"
    val `searchOrStartNewDiscussion`: I18nKey = "searchOrStartNewDiscussion"
    val `security`: I18nKey = "security"
    val `seeBestMove`: I18nKey = "seeBestMove"
    val `send`: I18nKey = "send"
    val `sentEmailWithLink`: I18nKey = "sentEmailWithLink"
    val `sessions`: I18nKey = "sessions"
    val `setFlair`: I18nKey = "setFlair"
    val `setTheBoard`: I18nKey = "setTheBoard"
    val `shareYourInsightsData`: I18nKey = "shareYourInsightsData"
    val `showHelpDialog`: I18nKey = "showHelpDialog"
    val `showMeEverything`: I18nKey = "showMeEverything"
    val `showThreat`: I18nKey = "showThreat"
    val `showUnreadLichessMessage`: I18nKey = "showUnreadLichessMessage"
    val `showVariationArrows`: I18nKey = "showVariationArrows"
    val `side`: I18nKey = "side"
    val `signIn`: I18nKey = "signIn"
    val `signUp`: I18nKey = "signUp"
    val `signupEmailHint`: I18nKey = "signupEmailHint"
    val `signUpToHostOrJoinASimul`: I18nKey = "signUpToHostOrJoinASimul"
    val `signupUsernameHint`: I18nKey = "signupUsernameHint"
    val `simulAddExtraTime`: I18nKey = "simulAddExtraTime"
    val `simulAddExtraTimePerPlayer`: I18nKey = "simulAddExtraTimePerPlayer"
    val `simulClockHint`: I18nKey = "simulClockHint"
    val `simulDescription`: I18nKey = "simulDescription"
    val `simulDescriptionHelp`: I18nKey = "simulDescriptionHelp"
    val `simulFeatured`: I18nKey = "simulFeatured"
    val `simulFeaturedHelp`: I18nKey = "simulFeaturedHelp"
    val `simulHostcolor`: I18nKey = "simulHostcolor"
    val `simulHostExtraTime`: I18nKey = "simulHostExtraTime"
    val `simulHostExtraTimePerPlayer`: I18nKey = "simulHostExtraTimePerPlayer"
    val `simultaneousExhibitions`: I18nKey = "simultaneousExhibitions"
    val `simulVariantsHint`: I18nKey = "simulVariantsHint"
    val `since`: I18nKey = "since"
    val `siteDescription`: I18nKey = "siteDescription"
    val `size`: I18nKey = "size"
    val `skipThisMove`: I18nKey = "skipThisMove"
    val `slow`: I18nKey = "slow"
    val `socialMediaLinks`: I18nKey = "socialMediaLinks"
    val `solution`: I18nKey = "solution"
    val `someoneYouReportedWasBanned`: I18nKey = "someoneYouReportedWasBanned"
    val `sorry`: I18nKey = "sorry"
    val `sound`: I18nKey = "sound"
    val `sourceCode`: I18nKey = "sourceCode"
    val `spectatorRoom`: I18nKey = "spectatorRoom"
    val `stalemate`: I18nKey = "stalemate"
    val `standard`: I18nKey = "standard"
    val `standByX`: I18nKey = "standByX"
    val `standing`: I18nKey = "standing"
    val `startedStreaming`: I18nKey = "startedStreaming"
    val `starting`: I18nKey = "starting"
    val `startPosition`: I18nKey = "startPosition"
    val `streamerManager`: I18nKey = "streamerManager"
    val `streamersMenu`: I18nKey = "streamersMenu"
    val `strength`: I18nKey = "strength"
    val `studyMenu`: I18nKey = "studyMenu"
    val `subject`: I18nKey = "subject"
    val `subscribe`: I18nKey = "subscribe"
    val `success`: I18nKey = "success"
    val `switchSides`: I18nKey = "switchSides"
    val `takeback`: I18nKey = "takeback"
    val `takebackPropositionAccepted`: I18nKey = "takebackPropositionAccepted"
    val `takebackPropositionCanceled`: I18nKey = "takebackPropositionCanceled"
    val `takebackPropositionDeclined`: I18nKey = "takebackPropositionDeclined"
    val `takebackPropositionSent`: I18nKey = "takebackPropositionSent"
    val `talkInChat`: I18nKey = "talkInChat"
    val `teamNamedX`: I18nKey = "teamNamedX"
    val `temporaryInconvenience`: I18nKey = "temporaryInconvenience"
    val `termsOfService`: I18nKey = "termsOfService"
    val `thankYou`: I18nKey = "thankYou"
    val `thankYouForReading`: I18nKey = "thankYouForReading"
    val `theFirstPersonToComeOnThisUrlWillPlayWithYou`: I18nKey = "theFirstPersonToComeOnThisUrlWillPlayWithYou"
    val `theForumEtiquette`: I18nKey = "theForumEtiquette"
    val `theGameIsADraw`: I18nKey = "theGameIsADraw"
    val `thematic`: I18nKey = "thematic"
    val `thisAccountViolatedTos`: I18nKey = "thisAccountViolatedTos"
    val `thisGameIsRated`: I18nKey = "thisGameIsRated"
    val `thisIsAChessCaptcha`: I18nKey = "thisIsAChessCaptcha"
    val `thisTopicIsArchived`: I18nKey = "thisTopicIsArchived"
    val `thisTopicIsNowClosed`: I18nKey = "thisTopicIsNowClosed"
    val `threeChecks`: I18nKey = "threeChecks"
    val `threefoldRepetition`: I18nKey = "threefoldRepetition"
    val `time`: I18nKey = "time"
    val `timeAlmostUp`: I18nKey = "timeAlmostUp"
    val `timeBeforeTournamentStarts`: I18nKey = "timeBeforeTournamentStarts"
    val `timeControl`: I18nKey = "timeControl"
    val `timeline`: I18nKey = "timeline"
    val `timeToProcessAMoveOnLichessServer`: I18nKey = "timeToProcessAMoveOnLichessServer"
    val `today`: I18nKey = "today"
    val `toggleAllAnalysis`: I18nKey = "toggleAllAnalysis"
    val `toggleGlyphAnnotations`: I18nKey = "toggleGlyphAnnotations"
    val `toggleLocalAnalysis`: I18nKey = "toggleLocalAnalysis"
    val `toggleLocalEvaluation`: I18nKey = "toggleLocalEvaluation"
    val `togglePositionAnnotations`: I18nKey = "togglePositionAnnotations"
    val `toggleTheChat`: I18nKey = "toggleTheChat"
    val `toggleVariationArrows`: I18nKey = "toggleVariationArrows"
    val `toInviteSomeoneToPlayGiveThisUrl`: I18nKey = "toInviteSomeoneToPlayGiveThisUrl"
    val `tools`: I18nKey = "tools"
    val `topGames`: I18nKey = "topGames"
    val `topics`: I18nKey = "topics"
    val `toReportSomeoneForCheatingOrBadBehavior`: I18nKey = "toReportSomeoneForCheatingOrBadBehavior"
    val `toRequestSupport`: I18nKey = "toRequestSupport"
    val `toStudy`: I18nKey = "toStudy"
    val `tournament`: I18nKey = "tournament"
    val `tournamentCalendar`: I18nKey = "tournamentCalendar"
    val `tournamentComplete`: I18nKey = "tournamentComplete"
    val `tournamentDoesNotExist`: I18nKey = "tournamentDoesNotExist"
    val `tournamentEntryCode`: I18nKey = "tournamentEntryCode"
    val `tournamentFAQ`: I18nKey = "tournamentFAQ"
    val `tournamentHomeDescription`: I18nKey = "tournamentHomeDescription"
    val `tournamentHomeTitle`: I18nKey = "tournamentHomeTitle"
    val `tournamentIsStarting`: I18nKey = "tournamentIsStarting"
    val `tournamentMayHaveBeenCanceled`: I18nKey = "tournamentMayHaveBeenCanceled"
    val `tournamentNotFound`: I18nKey = "tournamentNotFound"
    val `tournamentPairingsAreNowClosed`: I18nKey = "tournamentPairingsAreNowClosed"
    val `tournamentPoints`: I18nKey = "tournamentPoints"
    val `tournaments`: I18nKey = "tournaments"
    val `tournChat`: I18nKey = "tournChat"
    val `tournDescription`: I18nKey = "tournDescription"
    val `tournDescriptionHelp`: I18nKey = "tournDescriptionHelp"
    val `tpTimeSpentOnTV`: I18nKey = "tpTimeSpentOnTV"
    val `tpTimeSpentPlaying`: I18nKey = "tpTimeSpentPlaying"
    val `transparent`: I18nKey = "transparent"
    val `troll`: I18nKey = "troll"
    val `tryAnotherMoveForBlack`: I18nKey = "tryAnotherMoveForBlack"
    val `tryAnotherMoveForWhite`: I18nKey = "tryAnotherMoveForWhite"
    val `tryTheContactPage`: I18nKey = "tryTheContactPage"
    val `tryToWin`: I18nKey = "tryToWin"
    val `typePrivateNotesHere`: I18nKey = "typePrivateNotesHere"
    val `ultraBulletDesc`: I18nKey = "ultraBulletDesc"
    val `unblock`: I18nKey = "unblock"
    val `unfollow`: I18nKey = "unfollow"
    val `unfollowX`: I18nKey = "unfollowX"
    val `unknown`: I18nKey = "unknown"
    val `unknownDueToRounding`: I18nKey = "unknownDueToRounding"
    val `unlimited`: I18nKey = "unlimited"
    val `unsubscribe`: I18nKey = "unsubscribe"
    val `until`: I18nKey = "until"
    val `user`: I18nKey = "user"
    val `userIsBetterThanPercentOfPerfTypePlayers`: I18nKey = "userIsBetterThanPercentOfPerfTypePlayers"
    val `username`: I18nKey = "username"
    val `usernameAlreadyUsed`: I18nKey = "usernameAlreadyUsed"
    val `usernameCanBeUsedForNewAccount`: I18nKey = "usernameCanBeUsedForNewAccount"
    val `usernameCharsInvalid`: I18nKey = "usernameCharsInvalid"
    val `usernameNotFound`: I18nKey = "usernameNotFound"
    val `usernameOrEmail`: I18nKey = "usernameOrEmail"
    val `usernamePrefixInvalid`: I18nKey = "usernamePrefixInvalid"
    val `usernameSuffixInvalid`: I18nKey = "usernameSuffixInvalid"
    val `usernameUnacceptable`: I18nKey = "usernameUnacceptable"
    val `useTheReportForm`: I18nKey = "useTheReportForm"
    val `usingServerAnalysis`: I18nKey = "usingServerAnalysis"
    val `variant`: I18nKey = "variant"
    val `variantEnding`: I18nKey = "variantEnding"
    val `variantLoss`: I18nKey = "variantLoss"
    val `variants`: I18nKey = "variants"
    val `variantWin`: I18nKey = "variantWin"
    val `variationArrowsInfo`: I18nKey = "variationArrowsInfo"
    val `victory`: I18nKey = "victory"
    val `victoryVsYInZ`: I18nKey = "victoryVsYInZ"
    val `videoLibrary`: I18nKey = "videoLibrary"
    val `viewInFullSize`: I18nKey = "viewInFullSize"
    val `viewRematch`: I18nKey = "viewRematch"
    val `views`: I18nKey = "views"
    val `viewTheSolution`: I18nKey = "viewTheSolution"
    val `viewTournament`: I18nKey = "viewTournament"
    val `waitForSignupHelp`: I18nKey = "waitForSignupHelp"
    val `waiting`: I18nKey = "waiting"
    val `waitingForAnalysis`: I18nKey = "waitingForAnalysis"
    val `waitingForOpponent`: I18nKey = "waitingForOpponent"
    val `watch`: I18nKey = "watch"
    val `watchGames`: I18nKey = "watchGames"
    val `webmasters`: I18nKey = "webmasters"
    val `website`: I18nKey = "website"
    val `weeklyPerfTypeRatingDistribution`: I18nKey = "weeklyPerfTypeRatingDistribution"
    val `weHadToTimeYouOutForAWhile`: I18nKey = "weHadToTimeYouOutForAWhile"
    val `weHaveSentYouAnEmailClickTheLink`: I18nKey = "weHaveSentYouAnEmailClickTheLink"
    val `weHaveSentYouAnEmailTo`: I18nKey = "weHaveSentYouAnEmailTo"
    val `whatIsIheMatter`: I18nKey = "whatIsIheMatter"
    val `whatSignupUsername`: I18nKey = "whatSignupUsername"
    val `whenCreateSimul`: I18nKey = "whenCreateSimul"
    val `white`: I18nKey = "white"
    val `whiteCastlingKingside`: I18nKey = "whiteCastlingKingside"
    val `whiteCheckmatesInOneMove`: I18nKey = "whiteCheckmatesInOneMove"
    val `whiteDeclinesDraw`: I18nKey = "whiteDeclinesDraw"
    val `whiteDidntMove`: I18nKey = "whiteDidntMove"
    val `whiteDrawBlack`: I18nKey = "whiteDrawBlack"
    val `whiteIsVictorious`: I18nKey = "whiteIsVictorious"
    val `whiteLeftTheGame`: I18nKey = "whiteLeftTheGame"
    val `whiteOffersDraw`: I18nKey = "whiteOffersDraw"
    val `whitePlays`: I18nKey = "whitePlays"
    val `whiteResigned`: I18nKey = "whiteResigned"
    val `whiteTimeOut`: I18nKey = "whiteTimeOut"
    val `whiteWins`: I18nKey = "whiteWins"
    val `whiteWinsGame`: I18nKey = "whiteWinsGame"
    val `why`: I18nKey = "why"
    val `winner`: I18nKey = "winner"
    val `winning`: I18nKey = "winning"
    val `winOr50MovesByPriorMistake`: I18nKey = "winOr50MovesByPriorMistake"
    val `winPreventedBy50MoveRule`: I18nKey = "winPreventedBy50MoveRule"
    val `winRate`: I18nKey = "winRate"
    val `wins`: I18nKey = "wins"
    val `wishYouGreatGames`: I18nKey = "wishYouGreatGames"
    val `withdraw`: I18nKey = "withdraw"
    val `withEverybody`: I18nKey = "withEverybody"
    val `withFriends`: I18nKey = "withFriends"
    val `withNobody`: I18nKey = "withNobody"
    val `writeAPrivateNoteAboutThisUser`: I18nKey = "writeAPrivateNoteAboutThisUser"
    val `xCompetesInY`: I18nKey = "xCompetesInY"
    val `xCreatedTeamY`: I18nKey = "xCreatedTeamY"
    val `xHostsY`: I18nKey = "xHostsY"
    val `xInvitedYouToY`: I18nKey = "xInvitedYouToY"
    val `xIsAFreeYLibreOpenSourceChessServer`: I18nKey = "xIsAFreeYLibreOpenSourceChessServer"
    val `xJoinedTeamY`: I18nKey = "xJoinedTeamY"
    val `xJoinsY`: I18nKey = "xJoinsY"
    val `xLikesY`: I18nKey = "xLikesY"
    val `xMentionedYouInY`: I18nKey = "xMentionedYouInY"
    val `xOpeningExplorer`: I18nKey = "xOpeningExplorer"
    val `xPostedInForumY`: I18nKey = "xPostedInForumY"
    val `xRating`: I18nKey = "xRating"
    val `xStartedFollowingY`: I18nKey = "xStartedFollowingY"
    val `xStartedStreaming`: I18nKey = "xStartedStreaming"
    val `xWasPlayed`: I18nKey = "xWasPlayed"
    val `yes`: I18nKey = "yes"
    val `yesterday`: I18nKey = "yesterday"
    val `youAreBetterThanPercentOfPerfTypePlayers`: I18nKey = "youAreBetterThanPercentOfPerfTypePlayers"
    val `youAreLeavingLichess`: I18nKey = "youAreLeavingLichess"
    val `youAreNotInTeam`: I18nKey = "youAreNotInTeam"
    val `youAreNowPartOfTeam`: I18nKey = "youAreNowPartOfTeam"
    val `youArePlaying`: I18nKey = "youArePlaying"
    val `youBrowsedAway`: I18nKey = "youBrowsedAway"
    val `youCanAlsoScrollOverTheBoardToMoveInTheGame`: I18nKey = "youCanAlsoScrollOverTheBoardToMoveInTheGame"
    val `youCanDoBetter`: I18nKey = "youCanDoBetter"
    val `youCanHideFlair`: I18nKey = "youCanHideFlair"
    val `youCannotPostYetPlaySomeGames`: I18nKey = "youCannotPostYetPlaySomeGames"
    val `youCantStartNewGame`: I18nKey = "youCantStartNewGame"
    val `youDoNotHaveAnEstablishedPerfTypeRating`: I18nKey = "youDoNotHaveAnEstablishedPerfTypeRating"
    val `youHaveBeenTimedOut`: I18nKey = "youHaveBeenTimedOut"
    val `youHaveJoinedTeamX`: I18nKey = "youHaveJoinedTeamX"
    val `youNeedAnAccountToDoThat`: I18nKey = "youNeedAnAccountToDoThat"
    val `youPlayTheBlackPieces`: I18nKey = "youPlayTheBlackPieces"
    val `youPlayTheWhitePieces`: I18nKey = "youPlayTheWhitePieces"
    val `yourOpponentOffersADraw`: I18nKey = "yourOpponentOffersADraw"
    val `yourOpponentProposesATakeback`: I18nKey = "yourOpponentProposesATakeback"
    val `yourOpponentWantsToPlayANewGameWithYou`: I18nKey = "yourOpponentWantsToPlayANewGameWithYou"
    val `yourPendingSimuls`: I18nKey = "yourPendingSimuls"
    val `yourPerfRatingIsProvisional`: I18nKey = "yourPerfRatingIsProvisional"
    val `yourPerfRatingIsTooHigh`: I18nKey = "yourPerfRatingIsTooHigh"
    val `yourPerfRatingIsTooLow`: I18nKey = "yourPerfRatingIsTooLow"
    val `yourPerfTypeRatingIsRating`: I18nKey = "yourPerfTypeRatingIsRating"
    val `yourQuestionMayHaveBeenAnswered`: I18nKey = "yourQuestionMayHaveBeenAnswered"
    val `yourRating`: I18nKey = "yourRating"
    val `yourScore`: I18nKey = "yourScore"
    val `yourTopWeeklyPerfRatingIsTooHigh`: I18nKey = "yourTopWeeklyPerfRatingIsTooHigh"
    val `yourTurn`: I18nKey = "yourTurn"
    val `zeroAdvertisement`: I18nKey = "zeroAdvertisement"

  object storm:
    val `accuracy`: I18nKey = "storm:accuracy"
    val `allTime`: I18nKey = "storm:allTime"
    val `bestRunOfDay`: I18nKey = "storm:bestRunOfDay"
    val `clickToReload`: I18nKey = "storm:clickToReload"
    val `combo`: I18nKey = "storm:combo"
    val `createNewGame`: I18nKey = "storm:createNewGame"
    val `endRun`: I18nKey = "storm:endRun"
    val `failedPuzzles`: I18nKey = "storm:failedPuzzles"
    val `getReady`: I18nKey = "storm:getReady"
    val `highestSolved`: I18nKey = "storm:highestSolved"
    val `highscores`: I18nKey = "storm:highscores"
    val `highscoreX`: I18nKey = "storm:highscoreX"
    val `joinPublicRace`: I18nKey = "storm:joinPublicRace"
    val `joinRematch`: I18nKey = "storm:joinRematch"
    val `joinTheRace`: I18nKey = "storm:joinTheRace"
    val `moves`: I18nKey = "storm:moves"
    val `moveToStart`: I18nKey = "storm:moveToStart"
    val `newAllTimeHighscore`: I18nKey = "storm:newAllTimeHighscore"
    val `newDailyHighscore`: I18nKey = "storm:newDailyHighscore"
    val `newMonthlyHighscore`: I18nKey = "storm:newMonthlyHighscore"
    val `newRun`: I18nKey = "storm:newRun"
    val `newWeeklyHighscore`: I18nKey = "storm:newWeeklyHighscore"
    val `nextRace`: I18nKey = "storm:nextRace"
    val `playAgain`: I18nKey = "storm:playAgain"
    val `playedNbRunsOfPuzzleStorm`: I18nKey = "storm:playedNbRunsOfPuzzleStorm"
    val `previousHighscoreWasX`: I18nKey = "storm:previousHighscoreWasX"
    val `puzzlesPlayed`: I18nKey = "storm:puzzlesPlayed"
    val `puzzlesSolved`: I18nKey = "storm:puzzlesSolved"
    val `raceComplete`: I18nKey = "storm:raceComplete"
    val `raceYourFriends`: I18nKey = "storm:raceYourFriends"
    val `runs`: I18nKey = "storm:runs"
    val `score`: I18nKey = "storm:score"
    val `skip`: I18nKey = "storm:skip"
    val `skipExplanation`: I18nKey = "storm:skipExplanation"
    val `skipHelp`: I18nKey = "storm:skipHelp"
    val `skippedPuzzle`: I18nKey = "storm:skippedPuzzle"
    val `slowPuzzles`: I18nKey = "storm:slowPuzzles"
    val `spectating`: I18nKey = "storm:spectating"
    val `startTheRace`: I18nKey = "storm:startTheRace"
    val `thisMonth`: I18nKey = "storm:thisMonth"
    val `thisRunHasExpired`: I18nKey = "storm:thisRunHasExpired"
    val `thisRunWasOpenedInAnotherTab`: I18nKey = "storm:thisRunWasOpenedInAnotherTab"
    val `thisWeek`: I18nKey = "storm:thisWeek"
    val `time`: I18nKey = "storm:time"
    val `timePerMove`: I18nKey = "storm:timePerMove"
    val `viewBestRuns`: I18nKey = "storm:viewBestRuns"
    val `waitForRematch`: I18nKey = "storm:waitForRematch"
    val `waitingForMorePlayers`: I18nKey = "storm:waitingForMorePlayers"
    val `waitingToStart`: I18nKey = "storm:waitingToStart"
    val `xRuns`: I18nKey = "storm:xRuns"
    val `youPlayTheBlackPiecesInAllPuzzles`: I18nKey = "storm:youPlayTheBlackPiecesInAllPuzzles"
    val `youPlayTheWhitePiecesInAllPuzzles`: I18nKey = "storm:youPlayTheWhitePiecesInAllPuzzles"
    val `yourRankX`: I18nKey = "storm:yourRankX"

  object streamer:
    val `allStreamers`: I18nKey = "streamer:allStreamers"
    val `approved`: I18nKey = "streamer:approved"
    val `becomeStreamer`: I18nKey = "streamer:becomeStreamer"
    val `changePicture`: I18nKey = "streamer:changePicture"
    val `currentlyStreaming`: I18nKey = "streamer:currentlyStreaming"
    val `downloadKit`: I18nKey = "streamer:downloadKit"
    val `doYouHaveStream`: I18nKey = "streamer:doYouHaveStream"
    val `editPage`: I18nKey = "streamer:editPage"
    val `headline`: I18nKey = "streamer:headline"
    val `hereWeGo`: I18nKey = "streamer:hereWeGo"
    val `keepItShort`: I18nKey = "streamer:keepItShort"
    val `lastStream`: I18nKey = "streamer:lastStream"
    val `lichessStreamer`: I18nKey = "streamer:lichessStreamer"
    val `lichessStreamers`: I18nKey = "streamer:lichessStreamers"
    val `live`: I18nKey = "streamer:live"
    val `longDescription`: I18nKey = "streamer:longDescription"
    val `maxSize`: I18nKey = "streamer:maxSize"
    val `offline`: I18nKey = "streamer:offline"
    val `optionalOrEmpty`: I18nKey = "streamer:optionalOrEmpty"
    val `pendingReview`: I18nKey = "streamer:pendingReview"
    val `perk1`: I18nKey = "streamer:perk1"
    val `perk2`: I18nKey = "streamer:perk2"
    val `perk3`: I18nKey = "streamer:perk3"
    val `perk4`: I18nKey = "streamer:perk4"
    val `perks`: I18nKey = "streamer:perks"
    val `pleaseFillIn`: I18nKey = "streamer:pleaseFillIn"
    val `requestReview`: I18nKey = "streamer:requestReview"
    val `rule1`: I18nKey = "streamer:rule1"
    val `rule2`: I18nKey = "streamer:rule2"
    val `rule3`: I18nKey = "streamer:rule3"
    val `rule4`: I18nKey = "streamer:rule4"
    val `rules`: I18nKey = "streamer:rules"
    val `streamerLanguageSettings`: I18nKey = "streamer:streamerLanguageSettings"
    val `streamerName`: I18nKey = "streamer:streamerName"
    val `streamingFairplayFAQ`: I18nKey = "streamer:streamingFairplayFAQ"
    val `tellUsAboutTheStream`: I18nKey = "streamer:tellUsAboutTheStream"
    val `twitchUsername`: I18nKey = "streamer:twitchUsername"
    val `uploadPicture`: I18nKey = "streamer:uploadPicture"
    val `visibility`: I18nKey = "streamer:visibility"
    val `whenApproved`: I18nKey = "streamer:whenApproved"
    val `whenReady`: I18nKey = "streamer:whenReady"
    val `xIsStreaming`: I18nKey = "streamer:xIsStreaming"
    val `xStreamerPicture`: I18nKey = "streamer:xStreamerPicture"
    val `yourPage`: I18nKey = "streamer:yourPage"
    val `youTubeChannelId`: I18nKey = "streamer:youTubeChannelId"

  object study:
    val `addMembers`: I18nKey = "study:addMembers"
    val `addNewChapter`: I18nKey = "study:addNewChapter"
    val `allowCloning`: I18nKey = "study:allowCloning"
    val `allStudies`: I18nKey = "study:allStudies"
    val `allSyncMembersRemainOnTheSamePosition`: I18nKey = "study:allSyncMembersRemainOnTheSamePosition"
    val `alphabetical`: I18nKey = "study:alphabetical"
    val `analysisMode`: I18nKey = "study:analysisMode"
    val `annotateWithGlyphs`: I18nKey = "study:annotateWithGlyphs"
    val `attack`: I18nKey = "study:attack"
    val `automatic`: I18nKey = "study:automatic"
    val `back`: I18nKey = "study:back"
    val `blackIsBetter`: I18nKey = "study:blackIsBetter"
    val `blackIsSlightlyBetter`: I18nKey = "study:blackIsSlightlyBetter"
    val `blackIsWinning`: I18nKey = "study:blackIsWinning"
    val `blunder`: I18nKey = "study:blunder"
    val `brilliantMove`: I18nKey = "study:brilliantMove"
    val `chapterPgn`: I18nKey = "study:chapterPgn"
    val `chapterX`: I18nKey = "study:chapterX"
    val `clearAllCommentsInThisChapter`: I18nKey = "study:clearAllCommentsInThisChapter"
    val `clearAnnotations`: I18nKey = "study:clearAnnotations"
    val `clearChat`: I18nKey = "study:clearChat"
    val `clearVariations`: I18nKey = "study:clearVariations"
    val `cloneStudy`: I18nKey = "study:cloneStudy"
    val `commentThisMove`: I18nKey = "study:commentThisMove"
    val `commentThisPosition`: I18nKey = "study:commentThisPosition"
    val `confirmDeleteStudy`: I18nKey = "study:confirmDeleteStudy"
    val `contributor`: I18nKey = "study:contributor"
    val `contributors`: I18nKey = "study:contributors"
    val `copyChapterPgn`: I18nKey = "study:copyChapterPgn"
    val `counterplay`: I18nKey = "study:counterplay"
    val `createChapter`: I18nKey = "study:createChapter"
    val `createStudy`: I18nKey = "study:createStudy"
    val `currentChapterUrl`: I18nKey = "study:currentChapterUrl"
    val `dateAddedNewest`: I18nKey = "study:dateAddedNewest"
    val `dateAddedOldest`: I18nKey = "study:dateAddedOldest"
    val `deleteChapter`: I18nKey = "study:deleteChapter"
    val `deleteStudy`: I18nKey = "study:deleteStudy"
    val `deleteTheStudyChatHistory`: I18nKey = "study:deleteTheStudyChatHistory"
    val `deleteThisChapter`: I18nKey = "study:deleteThisChapter"
    val `development`: I18nKey = "study:development"
    val `downloadAllGames`: I18nKey = "study:downloadAllGames"
    val `downloadGame`: I18nKey = "study:downloadGame"
    val `dubiousMove`: I18nKey = "study:dubiousMove"
    val `editChapter`: I18nKey = "study:editChapter"
    val `editor`: I18nKey = "study:editor"
    val `editStudy`: I18nKey = "study:editStudy"
    val `embedInYourWebsite`: I18nKey = "study:embedInYourWebsite"
    val `empty`: I18nKey = "study:empty"
    val `enableSync`: I18nKey = "study:enableSync"
    val `equalPosition`: I18nKey = "study:equalPosition"
    val `everyone`: I18nKey = "study:everyone"
    val `first`: I18nKey = "study:first"
    val `getAFullComputerAnalysis`: I18nKey = "study:getAFullComputerAnalysis"
    val `goodMove`: I18nKey = "study:goodMove"
    val `hideNextMoves`: I18nKey = "study:hideNextMoves"
    val `hot`: I18nKey = "study:hot"
    val `importFromChapterX`: I18nKey = "study:importFromChapterX"
    val `initiative`: I18nKey = "study:initiative"
    val `interactiveLesson`: I18nKey = "study:interactiveLesson"
    val `interestingMove`: I18nKey = "study:interestingMove"
    val `inviteOnly`: I18nKey = "study:inviteOnly"
    val `inviteToTheStudy`: I18nKey = "study:inviteToTheStudy"
    val `kick`: I18nKey = "study:kick"
    val `last`: I18nKey = "study:last"
    val `leaveTheStudy`: I18nKey = "study:leaveTheStudy"
    val `like`: I18nKey = "study:like"
    val `loadAGameByUrl`: I18nKey = "study:loadAGameByUrl"
    val `loadAGameFromPgn`: I18nKey = "study:loadAGameFromPgn"
    val `loadAGameFromXOrY`: I18nKey = "study:loadAGameFromXOrY"
    val `loadAPositionFromFen`: I18nKey = "study:loadAPositionFromFen"
    val `makeSureTheChapterIsComplete`: I18nKey = "study:makeSureTheChapterIsComplete"
    val `manageTopics`: I18nKey = "study:manageTopics"
    val `members`: I18nKey = "study:members"
    val `mistake`: I18nKey = "study:mistake"
    val `mostPopular`: I18nKey = "study:mostPopular"
    val `myFavoriteStudies`: I18nKey = "study:myFavoriteStudies"
    val `myPrivateStudies`: I18nKey = "study:myPrivateStudies"
    val `myPublicStudies`: I18nKey = "study:myPublicStudies"
    val `myStudies`: I18nKey = "study:myStudies"
    val `myTopics`: I18nKey = "study:myTopics"
    val `nbChapters`: I18nKey = "study:nbChapters"
    val `nbGames`: I18nKey = "study:nbGames"
    val `nbMembers`: I18nKey = "study:nbMembers"
    val `newChapter`: I18nKey = "study:newChapter"
    val `newTag`: I18nKey = "study:newTag"
    val `next`: I18nKey = "study:next"
    val `nextChapter`: I18nKey = "study:nextChapter"
    val `nobody`: I18nKey = "study:nobody"
    val `noLetPeopleBrowseFreely`: I18nKey = "study:noLetPeopleBrowseFreely"
    val `noneYet`: I18nKey = "study:noneYet"
    val `noPinnedComment`: I18nKey = "study:noPinnedComment"
    val `normalAnalysis`: I18nKey = "study:normalAnalysis"
    val `novelty`: I18nKey = "study:novelty"
    val `onlyContributorsCanRequestAnalysis`: I18nKey = "study:onlyContributorsCanRequestAnalysis"
    val `onlyMe`: I18nKey = "study:onlyMe"
    val `onlyMove`: I18nKey = "study:onlyMove"
    val `onlyPublicStudiesCanBeEmbedded`: I18nKey = "study:onlyPublicStudiesCanBeEmbedded"
    val `open`: I18nKey = "study:open"
    val `orientation`: I18nKey = "study:orientation"
    val `pasteYourPgnTextHereUpToNbGames`: I18nKey = "study:pasteYourPgnTextHereUpToNbGames"
    val `pgnTags`: I18nKey = "study:pgnTags"
    val `pinnedChapterComment`: I18nKey = "study:pinnedChapterComment"
    val `pinnedStudyComment`: I18nKey = "study:pinnedStudyComment"
    val `playAgain`: I18nKey = "study:playAgain"
    val `playing`: I18nKey = "study:playing"
    val `pleaseOnlyInvitePeopleYouKnow`: I18nKey = "study:pleaseOnlyInvitePeopleYouKnow"
    val `popularTopics`: I18nKey = "study:popularTopics"
    val `prevChapter`: I18nKey = "study:prevChapter"
    val `previous`: I18nKey = "study:previous"
    val `private`: I18nKey = "study:private"
    val `public`: I18nKey = "study:public"
    val `readMoreAboutEmbedding`: I18nKey = "study:readMoreAboutEmbedding"
    val `recentlyUpdated`: I18nKey = "study:recentlyUpdated"
    val `rightUnderTheBoard`: I18nKey = "study:rightUnderTheBoard"
    val `save`: I18nKey = "study:save"
    val `saveChapter`: I18nKey = "study:saveChapter"
    val `searchByUsername`: I18nKey = "study:searchByUsername"
    val `shareAndExport`: I18nKey = "study:shareAndExport"
    val `shareChanges`: I18nKey = "study:shareChanges"
    val `showEvalBar`: I18nKey = "study:showEvalBar"
    val `spectator`: I18nKey = "study:spectator"
    val `start`: I18nKey = "study:start"
    val `startAtInitialPosition`: I18nKey = "study:startAtInitialPosition"
    val `startAtX`: I18nKey = "study:startAtX"
    val `startFromCustomPosition`: I18nKey = "study:startFromCustomPosition"
    val `startFromInitialPosition`: I18nKey = "study:startFromInitialPosition"
    val `studiesCreatedByX`: I18nKey = "study:studiesCreatedByX"
    val `studiesIContributeTo`: I18nKey = "study:studiesIContributeTo"
    val `studyActions`: I18nKey = "study:studyActions"
    val `studyNotFound`: I18nKey = "study:studyNotFound"
    val `studyPgn`: I18nKey = "study:studyPgn"
    val `studyUrl`: I18nKey = "study:studyUrl"
    val `theChapterIsTooShortToBeAnalysed`: I18nKey = "study:theChapterIsTooShortToBeAnalysed"
    val `timeTrouble`: I18nKey = "study:timeTrouble"
    val `topics`: I18nKey = "study:topics"
    val `unclearPosition`: I18nKey = "study:unclearPosition"
    val `unlike`: I18nKey = "study:unlike"
    val `unlisted`: I18nKey = "study:unlisted"
    val `urlOfTheGame`: I18nKey = "study:urlOfTheGame"
    val `visibility`: I18nKey = "study:visibility"
    val `whatAreStudies`: I18nKey = "study:whatAreStudies"
    val `whatWouldYouPlay`: I18nKey = "study:whatWouldYouPlay"
    val `whereDoYouWantToStudyThat`: I18nKey = "study:whereDoYouWantToStudyThat"
    val `whiteIsBetter`: I18nKey = "study:whiteIsBetter"
    val `whiteIsSlightlyBetter`: I18nKey = "study:whiteIsSlightlyBetter"
    val `whiteIsWinning`: I18nKey = "study:whiteIsWinning"
    val `withCompensation`: I18nKey = "study:withCompensation"
    val `withTheIdea`: I18nKey = "study:withTheIdea"
    val `xBroughtToYouByY`: I18nKey = "study:xBroughtToYouByY"
    val `yesKeepEveryoneOnTheSamePosition`: I18nKey = "study:yesKeepEveryoneOnTheSamePosition"
    val `youAreNowAContributor`: I18nKey = "study:youAreNowAContributor"
    val `youAreNowASpectator`: I18nKey = "study:youAreNowASpectator"
    val `youCanPasteThisInTheForumToEmbed`: I18nKey = "study:youCanPasteThisInTheForumToEmbed"
    val `youCompletedThisLesson`: I18nKey = "study:youCompletedThisLesson"
    val `zugzwang`: I18nKey = "study:zugzwang"

  object swiss:
    val `absences`: I18nKey = "swiss:absences"
    val `byes`: I18nKey = "swiss:byes"
    val `comparison`: I18nKey = "swiss:comparison"
    val `durationUnknown`: I18nKey = "swiss:durationUnknown"
    val `dutchSystem`: I18nKey = "swiss:dutchSystem"
    val `earlyDrawsAnswer`: I18nKey = "swiss:earlyDrawsAnswer"
    val `earlyDrawsQ`: I18nKey = "swiss:earlyDrawsQ"
    val `FIDEHandbook`: I18nKey = "swiss:FIDEHandbook"
    val `forbiddedUsers`: I18nKey = "swiss:forbiddedUsers"
    val `forbiddenPairings`: I18nKey = "swiss:forbiddenPairings"
    val `forbiddenPairingsHelp`: I18nKey = "swiss:forbiddenPairingsHelp"
    val `identicalForbidden`: I18nKey = "swiss:identicalForbidden"
    val `identicalPairing`: I18nKey = "swiss:identicalPairing"
    val `joinOrCreateTeam`: I18nKey = "swiss:joinOrCreateTeam"
    val `lateJoin`: I18nKey = "swiss:lateJoin"
    val `lateJoinA`: I18nKey = "swiss:lateJoinA"
    val `lateJoinQ`: I18nKey = "swiss:lateJoinQ"
    val `lateJoinUntil`: I18nKey = "swiss:lateJoinUntil"
    val `manualPairings`: I18nKey = "swiss:manualPairings"
    val `manualPairingsHelp`: I18nKey = "swiss:manualPairingsHelp"
    val `moreRoundsThanPlayersA`: I18nKey = "swiss:moreRoundsThanPlayersA"
    val `moreRoundsThanPlayersQ`: I18nKey = "swiss:moreRoundsThanPlayersQ"
    val `mustHavePlayedTheirLastSwissGame`: I18nKey = "swiss:mustHavePlayedTheirLastSwissGame"
    val `mustHavePlayedTheirLastSwissGameHelp`: I18nKey = "swiss:mustHavePlayedTheirLastSwissGameHelp"
    val `nbRounds`: I18nKey = "swiss:nbRounds"
    val `newSwiss`: I18nKey = "swiss:newSwiss"
    val `nextRound`: I18nKey = "swiss:nextRound"
    val `nowPlaying`: I18nKey = "swiss:nowPlaying"
    val `numberOfByesA`: I18nKey = "swiss:numberOfByesA"
    val `numberOfByesQ`: I18nKey = "swiss:numberOfByesQ"
    val `numberOfGames`: I18nKey = "swiss:numberOfGames"
    val `numberOfGamesAsManyAsPossible`: I18nKey = "swiss:numberOfGamesAsManyAsPossible"
    val `numberOfGamesPreDefined`: I18nKey = "swiss:numberOfGamesPreDefined"
    val `numberOfRounds`: I18nKey = "swiss:numberOfRounds"
    val `numberOfRoundsHelp`: I18nKey = "swiss:numberOfRoundsHelp"
    val `oneRoundEveryXDays`: I18nKey = "swiss:oneRoundEveryXDays"
    val `ongoingGames`: I18nKey = "swiss:ongoingGames"
    val `otherSystemsA`: I18nKey = "swiss:otherSystemsA"
    val `otherSystemsQ`: I18nKey = "swiss:otherSystemsQ"
    val `pairingsA`: I18nKey = "swiss:pairingsA"
    val `pairingsQ`: I18nKey = "swiss:pairingsQ"
    val `pairingSystem`: I18nKey = "swiss:pairingSystem"
    val `pairingSystemArena`: I18nKey = "swiss:pairingSystemArena"
    val `pairingSystemSwiss`: I18nKey = "swiss:pairingSystemSwiss"
    val `pairingWaitTime`: I18nKey = "swiss:pairingWaitTime"
    val `pairingWaitTimeArena`: I18nKey = "swiss:pairingWaitTimeArena"
    val `pairingWaitTimeSwiss`: I18nKey = "swiss:pairingWaitTimeSwiss"
    val `pause`: I18nKey = "swiss:pause"
    val `pauseSwiss`: I18nKey = "swiss:pauseSwiss"
    val `playYourGames`: I18nKey = "swiss:playYourGames"
    val `pointsCalculationA`: I18nKey = "swiss:pointsCalculationA"
    val `pointsCalculationQ`: I18nKey = "swiss:pointsCalculationQ"
    val `possibleButNotConsecutive`: I18nKey = "swiss:possibleButNotConsecutive"
    val `predefinedDuration`: I18nKey = "swiss:predefinedDuration"
    val `predefinedUsers`: I18nKey = "swiss:predefinedUsers"
    val `protectionAgainstNoShowA`: I18nKey = "swiss:protectionAgainstNoShowA"
    val `protectionAgainstNoShowQ`: I18nKey = "swiss:protectionAgainstNoShowQ"
    val `restrictedToTeamsA`: I18nKey = "swiss:restrictedToTeamsA"
    val `restrictedToTeamsQ`: I18nKey = "swiss:restrictedToTeamsQ"
    val `roundInterval`: I18nKey = "swiss:roundInterval"
    val `roundRobinA`: I18nKey = "swiss:roundRobinA"
    val `roundRobinQ`: I18nKey = "swiss:roundRobinQ"
    val `roundsAreStartedManually`: I18nKey = "swiss:roundsAreStartedManually"
    val `similarToOTB`: I18nKey = "swiss:similarToOTB"
    val `sonnebornBergerScore`: I18nKey = "swiss:sonnebornBergerScore"
    val `startingIn`: I18nKey = "swiss:startingIn"
    val `startingSoon`: I18nKey = "swiss:startingSoon"
    val `streaksAndBerserk`: I18nKey = "swiss:streaksAndBerserk"
    val `swiss`: I18nKey = "swiss:swiss"
    val `swissDescription`: I18nKey = "swiss:swissDescription"
    val `swissTournaments`: I18nKey = "swiss:swissTournaments"
    val `swissVsArenaA`: I18nKey = "swiss:swissVsArenaA"
    val `swissVsArenaQ`: I18nKey = "swiss:swissVsArenaQ"
    val `teamOnly`: I18nKey = "swiss:teamOnly"
    val `tieBreak`: I18nKey = "swiss:tieBreak"
    val `tiebreaksCalculationA`: I18nKey = "swiss:tiebreaksCalculationA"
    val `tiebreaksCalculationQ`: I18nKey = "swiss:tiebreaksCalculationQ"
    val `tournDuration`: I18nKey = "swiss:tournDuration"
    val `tournStartDate`: I18nKey = "swiss:tournStartDate"
    val `unlimitedAndFree`: I18nKey = "swiss:unlimitedAndFree"
    val `viewAllXRounds`: I18nKey = "swiss:viewAllXRounds"
    val `whatIfOneDoesntPlayA`: I18nKey = "swiss:whatIfOneDoesntPlayA"
    val `whatIfOneDoesntPlayQ`: I18nKey = "swiss:whatIfOneDoesntPlayQ"
    val `willSwissReplaceArenasA`: I18nKey = "swiss:willSwissReplaceArenasA"
    val `willSwissReplaceArenasQ`: I18nKey = "swiss:willSwissReplaceArenasQ"
    val `xMinutesBetweenRounds`: I18nKey = "swiss:xMinutesBetweenRounds"
    val `xRoundsSwiss`: I18nKey = "swiss:xRoundsSwiss"
    val `xSecondsBetweenRounds`: I18nKey = "swiss:xSecondsBetweenRounds"

  object team:
    val `allTeams`: I18nKey = "team:allTeams"
    val `battleOfNbTeams`: I18nKey = "team:battleOfNbTeams"
    val `beingReviewed`: I18nKey = "team:beingReviewed"
    val `closeTeam`: I18nKey = "team:closeTeam"
    val `closeTeamDescription`: I18nKey = "team:closeTeamDescription"
    val `completedTourns`: I18nKey = "team:completedTourns"
    val `declinedRequests`: I18nKey = "team:declinedRequests"
    val `entryCode`: I18nKey = "team:entryCode"
    val `entryCodeDescriptionForLeader`: I18nKey = "team:entryCodeDescriptionForLeader"
    val `incorrectEntryCode`: I18nKey = "team:incorrectEntryCode"
    val `innerTeam`: I18nKey = "team:innerTeam"
    val `joinLichessVariantTeam`: I18nKey = "team:joinLichessVariantTeam"
    val `joinTeam`: I18nKey = "team:joinTeam"
    val `kickSomeone`: I18nKey = "team:kickSomeone"
    val `leadersChat`: I18nKey = "team:leadersChat"
    val `leaderTeams`: I18nKey = "team:leaderTeams"
    val `listTheTeamsThatWillCompete`: I18nKey = "team:listTheTeamsThatWillCompete"
    val `manuallyReviewAdmissionRequests`: I18nKey = "team:manuallyReviewAdmissionRequests"
    val `manuallyReviewAdmissionRequestsHelp`: I18nKey = "team:manuallyReviewAdmissionRequestsHelp"
    val `messageAllMembers`: I18nKey = "team:messageAllMembers"
    val `messageAllMembersLongDescription`: I18nKey = "team:messageAllMembersLongDescription"
    val `messageAllMembersOverview`: I18nKey = "team:messageAllMembersOverview"
    val `myTeams`: I18nKey = "team:myTeams"
    val `nbLeadersPerTeam`: I18nKey = "team:nbLeadersPerTeam"
    val `nbMembers`: I18nKey = "team:nbMembers"
    val `newTeam`: I18nKey = "team:newTeam"
    val `noTeamFound`: I18nKey = "team:noTeamFound"
    val `numberOfLeadsPerTeam`: I18nKey = "team:numberOfLeadsPerTeam"
    val `numberOfLeadsPerTeamHelp`: I18nKey = "team:numberOfLeadsPerTeamHelp"
    val `oneTeamPerLine`: I18nKey = "team:oneTeamPerLine"
    val `oneTeamPerLineHelp`: I18nKey = "team:oneTeamPerLineHelp"
    val `onlyLeaderLeavesTeam`: I18nKey = "team:onlyLeaderLeavesTeam"
    val `quitTeam`: I18nKey = "team:quitTeam"
    val `requestDeclined`: I18nKey = "team:requestDeclined"
    val `subToTeamMessages`: I18nKey = "team:subToTeamMessages"
    val `swissTournamentOverview`: I18nKey = "team:swissTournamentOverview"
    val `team`: I18nKey = "team:team"
    val `teamAlreadyExists`: I18nKey = "team:teamAlreadyExists"
    val `teamBattle`: I18nKey = "team:teamBattle"
    val `teamBattleOverview`: I18nKey = "team:teamBattleOverview"
    val `teamLeaders`: I18nKey = "team:teamLeaders"
    val `teamPage`: I18nKey = "team:teamPage"
    val `teamRecentMembers`: I18nKey = "team:teamRecentMembers"
    val `teams`: I18nKey = "team:teams"
    val `teamsIlead`: I18nKey = "team:teamsIlead"
    val `teamTournament`: I18nKey = "team:teamTournament"
    val `teamTournamentOverview`: I18nKey = "team:teamTournamentOverview"
    val `thisTeamBattleIsOver`: I18nKey = "team:thisTeamBattleIsOver"
    val `upcomingTournaments`: I18nKey = "team:upcomingTournaments"
    val `whoToKick`: I18nKey = "team:whoToKick"
    val `willBeReviewed`: I18nKey = "team:willBeReviewed"
    val `xJoinRequests`: I18nKey = "team:xJoinRequests"
    val `youWayWantToLinkOneOfTheseTournaments`: I18nKey = "team:youWayWantToLinkOneOfTheseTournaments"

  object tfa:
    val `authenticationCode`: I18nKey = "tfa:authenticationCode"
    val `disableTwoFactor`: I18nKey = "tfa:disableTwoFactor"
    val `enableTwoFactor`: I18nKey = "tfa:enableTwoFactor"
    val `enterPassword`: I18nKey = "tfa:enterPassword"
    val `ifYouCannotScanEnterX`: I18nKey = "tfa:ifYouCannotScanEnterX"
    val `ifYouLoseAccessTwoFactor`: I18nKey = "tfa:ifYouLoseAccessTwoFactor"
    val `openTwoFactorApp`: I18nKey = "tfa:openTwoFactorApp"
    val `scanTheCode`: I18nKey = "tfa:scanTheCode"
    val `setupReminder`: I18nKey = "tfa:setupReminder"
    val `twoFactorAppRecommend`: I18nKey = "tfa:twoFactorAppRecommend"
    val `twoFactorAuth`: I18nKey = "tfa:twoFactorAuth"
    val `twoFactorEnabled`: I18nKey = "tfa:twoFactorEnabled"
    val `twoFactorHelp`: I18nKey = "tfa:twoFactorHelp"
    val `twoFactorToDisable`: I18nKey = "tfa:twoFactorToDisable"

  object timeago:
    val `completed`: I18nKey = "timeago:completed"
    val `inNbDays`: I18nKey = "timeago:inNbDays"
    val `inNbHours`: I18nKey = "timeago:inNbHours"
    val `inNbMinutes`: I18nKey = "timeago:inNbMinutes"
    val `inNbMonths`: I18nKey = "timeago:inNbMonths"
    val `inNbSeconds`: I18nKey = "timeago:inNbSeconds"
    val `inNbWeeks`: I18nKey = "timeago:inNbWeeks"
    val `inNbYears`: I18nKey = "timeago:inNbYears"
    val `justNow`: I18nKey = "timeago:justNow"
    val `nbDaysAgo`: I18nKey = "timeago:nbDaysAgo"
    val `nbHoursAgo`: I18nKey = "timeago:nbHoursAgo"
    val `nbHoursRemaining`: I18nKey = "timeago:nbHoursRemaining"
    val `nbMinutesAgo`: I18nKey = "timeago:nbMinutesAgo"
    val `nbMinutesRemaining`: I18nKey = "timeago:nbMinutesRemaining"
    val `nbMonthsAgo`: I18nKey = "timeago:nbMonthsAgo"
    val `nbWeeksAgo`: I18nKey = "timeago:nbWeeksAgo"
    val `nbYearsAgo`: I18nKey = "timeago:nbYearsAgo"
    val `rightNow`: I18nKey = "timeago:rightNow"

  object tourname:
    val `classicalShield`: I18nKey = "tourname:classicalShield"
    val `classicalShieldArena`: I18nKey = "tourname:classicalShieldArena"
    val `dailyClassical`: I18nKey = "tourname:dailyClassical"
    val `dailyClassicalArena`: I18nKey = "tourname:dailyClassicalArena"
    val `dailyRapid`: I18nKey = "tourname:dailyRapid"
    val `dailyRapidArena`: I18nKey = "tourname:dailyRapidArena"
    val `dailyX`: I18nKey = "tourname:dailyX"
    val `dailyXArena`: I18nKey = "tourname:dailyXArena"
    val `easternClassical`: I18nKey = "tourname:easternClassical"
    val `easternClassicalArena`: I18nKey = "tourname:easternClassicalArena"
    val `easternRapid`: I18nKey = "tourname:easternRapid"
    val `easternRapidArena`: I18nKey = "tourname:easternRapidArena"
    val `easternX`: I18nKey = "tourname:easternX"
    val `easternXArena`: I18nKey = "tourname:easternXArena"
    val `eliteX`: I18nKey = "tourname:eliteX"
    val `eliteXArena`: I18nKey = "tourname:eliteXArena"
    val `hourlyRapid`: I18nKey = "tourname:hourlyRapid"
    val `hourlyRapidArena`: I18nKey = "tourname:hourlyRapidArena"
    val `hourlyX`: I18nKey = "tourname:hourlyX"
    val `hourlyXArena`: I18nKey = "tourname:hourlyXArena"
    val `monthlyClassical`: I18nKey = "tourname:monthlyClassical"
    val `monthlyClassicalArena`: I18nKey = "tourname:monthlyClassicalArena"
    val `monthlyRapid`: I18nKey = "tourname:monthlyRapid"
    val `monthlyRapidArena`: I18nKey = "tourname:monthlyRapidArena"
    val `monthlyX`: I18nKey = "tourname:monthlyX"
    val `monthlyXArena`: I18nKey = "tourname:monthlyXArena"
    val `rapidShield`: I18nKey = "tourname:rapidShield"
    val `rapidShieldArena`: I18nKey = "tourname:rapidShieldArena"
    val `weeklyClassical`: I18nKey = "tourname:weeklyClassical"
    val `weeklyClassicalArena`: I18nKey = "tourname:weeklyClassicalArena"
    val `weeklyRapid`: I18nKey = "tourname:weeklyRapid"
    val `weeklyRapidArena`: I18nKey = "tourname:weeklyRapidArena"
    val `weeklyX`: I18nKey = "tourname:weeklyX"
    val `weeklyXArena`: I18nKey = "tourname:weeklyXArena"
    val `xArena`: I18nKey = "tourname:xArena"
    val `xShield`: I18nKey = "tourname:xShield"
    val `xShieldArena`: I18nKey = "tourname:xShieldArena"
    val `xTeamBattle`: I18nKey = "tourname:xTeamBattle"
    val `yearlyClassical`: I18nKey = "tourname:yearlyClassical"
    val `yearlyClassicalArena`: I18nKey = "tourname:yearlyClassicalArena"
    val `yearlyRapid`: I18nKey = "tourname:yearlyRapid"
    val `yearlyRapidArena`: I18nKey = "tourname:yearlyRapidArena"
    val `yearlyX`: I18nKey = "tourname:yearlyX"
    val `yearlyXArena`: I18nKey = "tourname:yearlyXArena"

  object ublog:
    val `blogTips`: I18nKey = "ublog:blogTips"
    val `blogTopics`: I18nKey = "ublog:blogTopics"
    val `communityBlogs`: I18nKey = "ublog:communityBlogs"
    val `continueReadingPost`: I18nKey = "ublog:continueReadingPost"
    val `createBlogDiscussion`: I18nKey = "ublog:createBlogDiscussion"
    val `createBlogDiscussionHelp`: I18nKey = "ublog:createBlogDiscussionHelp"
    val `deleteBlog`: I18nKey = "ublog:deleteBlog"
    val `discussThisBlogPostInTheForum`: I18nKey = "ublog:discussThisBlogPostInTheForum"
    val `drafts`: I18nKey = "ublog:drafts"
    val `editYourBlogPost`: I18nKey = "ublog:editYourBlogPost"
    val `friendBlogs`: I18nKey = "ublog:friendBlogs"
    val `imageAlt`: I18nKey = "ublog:imageAlt"
    val `imageCredit`: I18nKey = "ublog:imageCredit"
    val `inappropriateContentAccountClosed`: I18nKey = "ublog:inappropriateContentAccountClosed"
    val `latestBlogPosts`: I18nKey = "ublog:latestBlogPosts"
    val `lichessBlogPostsFromXYear`: I18nKey = "ublog:lichessBlogPostsFromXYear"
    val `lichessOfficialBlog`: I18nKey = "ublog:lichessOfficialBlog"
    val `likedBlogs`: I18nKey = "ublog:likedBlogs"
    val `moreBlogPostsBy`: I18nKey = "ublog:moreBlogPostsBy"
    val `nbViews`: I18nKey = "ublog:nbViews"
    val `newPost`: I18nKey = "ublog:newPost"
    val `noDrafts`: I18nKey = "ublog:noDrafts"
    val `noPostsInThisBlogYet`: I18nKey = "ublog:noPostsInThisBlogYet"
    val `postBody`: I18nKey = "ublog:postBody"
    val `postIntro`: I18nKey = "ublog:postIntro"
    val `postTitle`: I18nKey = "ublog:postTitle"
    val `previousBlogPosts`: I18nKey = "ublog:previousBlogPosts"
    val `published`: I18nKey = "ublog:published"
    val `publishedNbBlogPosts`: I18nKey = "ublog:publishedNbBlogPosts"
    val `publishHelp`: I18nKey = "ublog:publishHelp"
    val `publishOnYourBlog`: I18nKey = "ublog:publishOnYourBlog"
    val `safeAndRespectfulContent`: I18nKey = "ublog:safeAndRespectfulContent"
    val `safeToUseImages`: I18nKey = "ublog:safeToUseImages"
    val `saveDraft`: I18nKey = "ublog:saveDraft"
    val `selectPostTopics`: I18nKey = "ublog:selectPostTopics"
    val `thisIsADraft`: I18nKey = "ublog:thisIsADraft"
    val `thisPostIsPublished`: I18nKey = "ublog:thisPostIsPublished"
    val `uploadAnImageForYourPost`: I18nKey = "ublog:uploadAnImageForYourPost"
    val `useImagesYouMadeYourself`: I18nKey = "ublog:useImagesYouMadeYourself"
    val `viewAllNbPosts`: I18nKey = "ublog:viewAllNbPosts"
    val `xBlog`: I18nKey = "ublog:xBlog"
    val `xPublishedY`: I18nKey = "ublog:xPublishedY"
    val `youBlockedByBlogAuthor`: I18nKey = "ublog:youBlockedByBlogAuthor"

  object voiceCommands:
    val `cancelTimerOrDenyARequest`: I18nKey = "voiceCommands:cancelTimerOrDenyARequest"
    val `castle`: I18nKey = "voiceCommands:castle"
    val `instructions1`: I18nKey = "voiceCommands:instructions1"
    val `instructions2`: I18nKey = "voiceCommands:instructions2"
    val `instructions3`: I18nKey = "voiceCommands:instructions3"
    val `instructions4`: I18nKey = "voiceCommands:instructions4"
    val `instructions5`: I18nKey = "voiceCommands:instructions5"
    val `instructions6`: I18nKey = "voiceCommands:instructions6"
    val `moveToE4OrSelectE4Piece`: I18nKey = "voiceCommands:moveToE4OrSelectE4Piece"
    val `phoneticAlphabetIsBest`: I18nKey = "voiceCommands:phoneticAlphabetIsBest"
    val `playPreferredMoveOrConfirmSomething`: I18nKey = "voiceCommands:playPreferredMoveOrConfirmSomething"
    val `selectOrCaptureABishop`: I18nKey = "voiceCommands:selectOrCaptureABishop"
    val `showPuzzleSolution`: I18nKey = "voiceCommands:showPuzzleSolution"
    val `sleep`: I18nKey = "voiceCommands:sleep"
    val `takeRookWithQueen`: I18nKey = "voiceCommands:takeRookWithQueen"
    val `thisBlogPost`: I18nKey = "voiceCommands:thisBlogPost"
    val `turnOffVoiceRecognition`: I18nKey = "voiceCommands:turnOffVoiceRecognition"
    val `voiceCommands`: I18nKey = "voiceCommands:voiceCommands"
    val `watchTheVideoTutorial`: I18nKey = "voiceCommands:watchTheVideoTutorial"
