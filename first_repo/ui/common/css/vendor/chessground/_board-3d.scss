$td-outer-height-ratio: 476 / 512;
$td-outer-height-percent: $td-outer-height-ratio * 100%;
$td-inner-height-ratio: 464.5 / 512;
$td-inner-relative-percent: $td-inner-height-ratio / $td-outer-height-ratio * 100%;

@include breakpoint($mq-col1-uniboard) {
  .is3d {
    /* horiz scroll caused by 3d pieces overflowing the board */
    overflow: hidden;
  }
}

.main-board {
  padding-bottom: $td-outer-height-percent;

  .cg-wrap {
    height: $td-inner-relative-percent;
  }
}

cg-helper {
  // Default (from 2D boards) would be 12.5% of width.
  padding-bottom: $td-inner-height-ratio * 12.5%;

  // The "display: table" hack is not useful here, because the board is not
  // square. So heights corresponding to rounded widths are not always
  // integers, much less have the desired effect.
  // Additionally behavior with non-integer heights varies across Chrome
  // versions.
  display: block;
}

piece {
  /* original size: width: 140.625%; height: 179.6875%; */
  /* size on 3D board, with height/width = 90.78571% */
  width: 16.741%;
  height: 23.563%;
  left: -1.85%;
  top: -9.1%;
}

.is2d piece {
  /* copy of board.css to override miniboards */
  left: 0;
  top: 0;
  width: 12.5%;
  height: 12.5%;
}

cg-board::before {
  position: absolute;
  top: -0.730688%;
  left: 0;
  width: 100%;
  height: 103.2%;
  content: '';
  background-size: cover;
}

.is2d {
  /* override miniboards */
  cg-helper {
    padding-bottom: 12.5%;
    display: table;
  }

  cg-board {
    top: 0;
    height: 100%;

    &::before {
      content: none;
    }
  }
}

$board-files: 'Black-White-Aluminium', 'Brushed-Aluminium', 'China-Blue', 'China-Green', 'China-Grey', 'China-Scarlet',
  'China-Yellow', 'Classic-Blue', 'Transparent-Glass', 'Gold-Silver', 'Green-Glass', 'Light-Wood', 'Power-Coated',
  'Purple-Black', 'Rosewood', 'Wood-Glass', 'Wax', 'Jade', 'Marble', 'Woodi';

@each $name in $board-files {
  .#{$name} cg-board::before {
    background-image: img-url('staunton/board/#{$name}.png');
  }
}

$piece-files: (
  'Staunton': false,
  'Basic': true,
  'Experimental': true,
  'Glass': true,
  'Metal': true,
  'ModernJade': true,
  'ModernWood': true,
  'RedVBlue': true,
  'Trimmed': true,
  'Wood': true,
  'CubesAndPi': true,
);

@each $name, $flips in $piece-files {
  @each $color in 'White', 'Black' {
    @each $type in 'Pawn', 'Bishop', 'Knight', 'Rook', 'Queen', 'King' {
      .#{$name} .#{to-lower-case($type)}.#{to-lower-case($color)} {
        background-image: img-url('staunton/piece/#{$name}/#{$color}-#{$type}.png');
      }
    }

    @if $flips {
      @each $color, $orientation in ('White': 'black', 'Black': 'white') {
        @each $type in 'Bishop', 'Knight' {
          .#{$name} .main-board .orientation-#{$orientation} .#{to-lower-case($type)}.#{to-lower-case($color)} {
            background-image: img-url('staunton/piece/#{$name}/#{$color}-#{$type}-Flipped.png');
          }
        }
      }
    }
  }
}

#promotion-choice piece {
  width: 140.625%;
  height: 197.925%;
  top: 0;
  left: -18%;
  transform: scale(0.7) translateY(-45%);
  background-position: 0 -6px;
}

.main-board,
.eval-gauge {
  margin-top: 4vh;
}

.board-resize {
  $resize-width: 20px;

  @include breakpoint($mq-col2-uniboard) {
    bottom: #{28px - $resize-width} !important;
  }
}
