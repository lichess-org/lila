#!/usr/bin/python3

# timeago-to-scala - convert
# https://github.com/hustcc/timeago.js/tree/master/locales to scala
#
# Copyright (C) 2017 Lakin Wecker <lakin@wecker.ca>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import os.path
import subprocess
import sys
import re


def main(args):
    if not args:
        print("// Usage:", file=sys.stderr)
        print("// $ git clone https://github.com/hustcc/timeago.js ../timeago.js", file=sys.stderr)
        print("// $ # maybe edit timago.js tsconfig to adjust target")
        print("// (cd ../timeago.js && npm install && npm run build:esm)", file=sys.stderr)
        print("// $ ./bin/gen/timeago-to-scala.py ../timeago.js/esm/lang/*.js > modules/i18n/src/main/TimeagoLocales.scala", file=sys.stderr)
        return 1

    print("// This file is generated by bin/gen/timeago-to-scala.py.")
    print("// Do not edit it manually!")
    print()
    print("package lila.i18n")
    print()
    print("import scala.annotation.nowarn")
    print()
    print("object TimeagoLocales {")
    print("  @nowarn(\"msg=possible missing interpolator\")")
    print("  val js: Map[String, String] = Map(")

    first = True

    for arg in sorted(args, key=os.path.basename):
        locale = os.path.basename(arg).replace(".js", "")

        if locale == "en_US":
            locale = "en"

        if not arg.endswith(".js") or arg.endswith("index.js") or locale == "en_short":
            print("    // Skipping file: {}".format(arg), file=sys.stderr)
            continue

        if first:
            first = False
        else:
            print(",")

        print("    // {} -> {}".format(arg, locale), file=sys.stderr)

        with open(arg) as f:
            js = postprocess(terser(preprocess(f.read())))
            print('''    "{}" -> """{}"""'''.format(locale, js), end="")

    print()
    print("  )")
    print("}")

    return 0


def terser(js):
    p = subprocess.Popen(["yarn", "run", "--silent", "terser", "--mangle", "--compress", "unsafe_arrows", "--toplevel", "--ecma", "2018", "--safari10"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=sys.stderr)
    stdout, stderr = p.communicate(js.encode("utf-8"))
    if p.returncode != 0:
        sys.exit(p.returncode)
    return stdout.decode("utf-8")


def preprocess(js):
    return "{" + js.replace("export default", "lichess.timeagoLocale =") + "\n}"

def postprocess(js):
    return js.strip()


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
