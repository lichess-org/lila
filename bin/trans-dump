#!/usr/bin/env node

const { readFile, writeFile } = require('fs/promises');
const { parseString } = require('xml2js');
const path = require('path');

const lilaDir = path.resolve(__dirname, '..');
const baseDir = path.resolve(lilaDir, 'translation/source');
const dbs =
  'site arena emails learn activity coordinates study clas contact appeal patron coach broadcast streamer tfa settings preferences team perfStat search tourname faq lag swiss puzzle puzzleTheme challenge storm ublog insight keyboardMove timeago oauthScope dgt voiceCommands onboarding'.split(
    ' ',
  );

function xmlName(name) {
  return name === 'clas' ? 'class' : name;
}

function keyListFrom(name) {
  return readFile(path.resolve(baseDir, `${xmlName(name)}.xml`), { encoding: 'utf8' }).then(txt => {
    return new Promise((resolve, reject) =>
      parseString(txt, (_, xml) => {
        const strings = (xml.resources.string || []).map(e => e['$'].name);
        const plurals = (xml.resources.plurals || []).map(e => e['$'].name);
        const keys = strings.concat(plurals);
        const spaces = '    ';

        resolve({
          name,
          code:
            keys
              .map(
                k => `${spaces}val \`${k}\`: I18nKey = "${name === 'site' ? '' : xmlName(name) + ':'}${k}"`,
              )
              .join('\n') + '\n',
        });
      }),
    );
  });
}

Promise.all(dbs.map(keyListFrom)).then(objs => {
  function dbCode(obj) {
    return `  object ${obj.name}:\n${obj.code}`;
  }

  const code = `// Generated with bin/trans-dump.js
package lila.core.i18n

opaque type I18nKey = String
object I18nKey:
  def apply(key: String): I18nKey = key
  import scalatags.Text.RawFrag
  extension (key: I18nKey)
    def value: String = key
    def txt(args: Any*)(using trans: Translate): String =
      trans.translator.txt.literal(key, args, trans.lang)
    def pluralTxt(count: Count, args: Any*)(using trans: Translate): String =
      trans.translator.txt.plural(key, count, args, trans.lang)
    def pluralSameTxt(count: Long)(using trans: Translate): String = pluralTxt(count, count)
    def apply(args: Matchable*)(using trans: Translate): RawFrag =
      trans.translator.frag.literal(key, args, trans.lang)
    def plural(count: Count, args: Matchable*)(using trans: Translate): RawFrag =
      trans.translator.frag.plural(key, count, args, trans.lang)
    def pluralSame(count: Int)(using trans: Translate): RawFrag = plural(count, count)

  // format: OFF
${objs.map(dbCode).join('\n')}
`;

  return writeFile(path.resolve(lilaDir, 'modules/hub/src/main/i18n/key.scala'), code);
});
